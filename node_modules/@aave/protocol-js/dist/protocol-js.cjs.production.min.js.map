{"version":3,"file":"protocol-js.cjs.production.min.js","sources":["../src/helpers/bignumber.ts","../src/v1/types.ts","../src/helpers/ray-math.ts","../src/helpers/constants.ts","../src/v1/computations-and-formatting.ts","../src/helpers/pool-math.ts","../src/v2/computations-and-formatting.ts","../src/tx-builder/types/index.ts","../node_modules/regenerator-runtime/runtime.js","../src/tx-builder/config/v2/addresses.ts","../src/tx-builder/config/index.ts","../src/tx-builder/contract-types/factories/IAaveGovernanceV2__factory.ts","../src/tx-builder/contract-types/factories/IAaveStakingHelper__factory.ts","../src/tx-builder/contract-types/factories/IDebtTokenBase__factory.ts","../src/tx-builder/contract-types/factories/IERC20Detailed__factory.ts","../src/tx-builder/contract-types/factories/IFaucet__factory.ts","../src/tx-builder/contract-types/factories/IGovernancePowerDelegationToken__factory.ts","../src/tx-builder/contract-types/factories/IGovernanceStrategy__factory.ts","../src/tx-builder/contract-types/factories/IGovernanceV2Helper__factory.ts","../src/tx-builder/contract-types/factories/ILendingPool__factory.ts","../src/tx-builder/contract-types/factories/ILendToAaveMigrator__factory.ts","../src/tx-builder/contract-types/factories/IMinter__factory.ts","../src/tx-builder/contract-types/factories/IRepayWithCollateral__factory.ts","../src/tx-builder/contract-types/factories/IStakedToken__factory.ts","../src/tx-builder/contract-types/factories/ISwapCollateral__factory.ts","../src/tx-builder/contract-types/factories/ISynthetix__factory.ts","../src/tx-builder/contract-types/factories/IWETHGateway__factory.ts","../src/tx-builder/utils/parsings.ts","../src/tx-builder/validators/paramValidators.ts","../src/tx-builder/validators/validations.ts","../src/tx-builder/validators/methodValidators.ts","../src/tx-builder/utils/gasStation.ts","../src/tx-builder/services/BaseService.ts","../src/tx-builder/services/v2/LendingPool.ts","../src/tx-builder/services/ERC20.ts","../src/tx-builder/services/Faucet.ts","../src/tx-builder/services/LTAMigrator.ts","../src/tx-builder/services/Staking.ts","../src/tx-builder/services/SynthetixService.ts","../src/tx-builder/txBuilder.ts","../src/tx-builder/services/WETHGateway.ts","../src/tx-builder/services/BaseDebtToken.ts","../src/tx-builder/services/LiquiditySwapAdapter.ts","../src/tx-builder/types/GovernanceV2MethodTypes.ts","../src/tx-builder/types/GovernanceV2ReturnTypes.ts","../src/tx-builder/services/RepayWithCollateralAdapter.ts","../src/tx-builder/utils/ipfs.ts","../src/tx-builder/services/v2/AaveGovernanceV2.ts","../src/tx-builder/services/v2/GovernanceDelegationTokenService.ts","../src/tx-builder/v2.ts"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport type BigNumberValue = string | number | BigNumber;\n\nexport const BigNumberZD = BigNumber.clone({\n  DECIMAL_PLACES: 0,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n});\n\nexport function valueToBigNumber(amount: BigNumberValue): BigNumber {\n  return new BigNumber(amount);\n}\n\nexport function valueToZDBigNumber(amount: BigNumberValue): BigNumber {\n  return new BigNumberZD(amount);\n}\n\nconst bn10 = new BigNumber(10);\n\nconst bn10PowLookup: { [key: number]: BigNumber } = {};\n\n/**\n * It's a performance optimized version of 10 ** x, which essentially memoizes previously used pows and resolves them as lookup.\n * @param decimals\n * @returns 10 ** decimals\n */\nexport function pow10(decimals: number): BigNumber {\n  if (!bn10PowLookup[decimals]) bn10PowLookup[decimals] = bn10.pow(decimals);\n  return bn10PowLookup[decimals];\n}\n\nexport function normalize(n: BigNumberValue, decimals: number): string {\n  return valueToBigNumber(n).dividedBy(pow10(decimals)).toString(10);\n}\n","export enum BorrowRateMode {\n  None = 'None',\n  Stable = 'Stable',\n  Variable = 'Variable',\n}\n\nexport type ReserveRatesData = {\n  id: string;\n  symbol: string;\n  paramsHistory: {\n    variableBorrowIndex: string;\n    liquidityIndex: string;\n    timestamp: number;\n  }[];\n};\n\nexport type ReserveData = {\n  id: string;\n  underlyingAsset: string;\n  name: string;\n  symbol: string;\n  decimals: number;\n  isActive: boolean;\n  isFreezed: boolean;\n  usageAsCollateralEnabled: boolean;\n  borrowingEnabled: boolean;\n  stableBorrowRateEnabled: boolean;\n  baseLTVasCollateral: string;\n  optimalUtilisationRate: string;\n  stableRateSlope1: string;\n  stableRateSlope2: string;\n  averageStableBorrowRate: string;\n  baseVariableBorrowRate: string;\n  variableRateSlope1: string;\n  variableRateSlope2: string;\n  liquidityIndex: string;\n  reserveLiquidationThreshold: string;\n  reserveLiquidationBonus: string;\n  variableBorrowIndex: string;\n  variableBorrowRate: string;\n  avg30DaysVariableBorrowRate?: string;\n  availableLiquidity: string;\n  stableBorrowRate: string;\n  liquidityRate: string;\n  avg30DaysLiquidityRate?: string;\n  totalBorrows: string;\n  totalBorrowsStable: string;\n  totalBorrowsVariable: string;\n  totalLiquidity: string;\n  utilizationRate: string;\n  lastUpdateTimestamp: number;\n  aToken: {\n    id: string;\n  };\n  price: {\n    priceInEth: string;\n  };\n};\n\nexport type UserReserveData = {\n  principalATokenBalance: string;\n  userBalanceIndex: string;\n  redirectedBalance: string;\n  interestRedirectionAddress: string;\n  usageAsCollateralEnabledOnUser: boolean;\n  borrowRate: string;\n  borrowRateMode: BorrowRateMode;\n  originationFee: string;\n  principalBorrows: string;\n  variableBorrowIndex: string;\n  lastUpdateTimestamp: number;\n  reserve: {\n    id: string;\n    underlyingAsset: string;\n    name: string;\n    symbol: string;\n    decimals: number;\n    liquidityRate: string;\n    reserveLiquidationBonus: string;\n    lastUpdateTimestamp: number;\n    aToken: {\n      id: string;\n    };\n  };\n};\n\nexport type ComputedUserReserve = UserReserveData & {\n  currentUnderlyingBalance: string;\n  currentUnderlyingBalanceETH: string;\n  currentUnderlyingBalanceUSD: string;\n\n  currentBorrows: string;\n  currentBorrowsETH: string;\n  currentBorrowsUSD: string;\n\n  principalBorrowsETH: string;\n  principalBorrowsUSD: string;\n\n  originationFeeETH: string;\n  originationFeeUSD: string;\n};\n\nexport type UserSummaryData = {\n  id: string;\n  totalLiquidityETH: string;\n  totalCollateralETH: string;\n  totalBorrowsETH: string;\n  totalFeesETH: string;\n  totalFeesUSD: string;\n  totalLiquidityUSD: string;\n  totalCollateralUSD: string;\n  totalBorrowsUSD: string;\n  totalBorrowsWithFeesETH: string;\n  totalBorrowsWithFeesUSD: string;\n  availableBorrowsETH: string;\n  currentLoanToValue: string;\n  currentLiquidationThreshold: string;\n  maxAmountToWithdrawInEth: string;\n  healthFactor: string;\n  reservesData: ComputedUserReserve[];\n};\n","import BigNumber from 'bignumber.js';\nimport { BigNumberValue, valueToZDBigNumber } from './bignumber';\n\nexport const WAD = valueToZDBigNumber(10).pow(18);\nexport const HALF_WAD = WAD.dividedBy(2);\n\nexport const RAY = valueToZDBigNumber(10).pow(27);\nexport const HALF_RAY = RAY.dividedBy(2);\n\nexport const WAD_RAY_RATIO = valueToZDBigNumber(10).pow(9);\n\nexport function wadMul(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  return HALF_WAD.plus(valueToZDBigNumber(a).multipliedBy(b)).div(WAD);\n}\n\nexport function wadDiv(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  const halfB = valueToZDBigNumber(b).div(2);\n\n  return halfB.plus(valueToZDBigNumber(a).multipliedBy(WAD)).div(b);\n}\n\nexport function rayMul(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  return HALF_RAY.plus(valueToZDBigNumber(a).multipliedBy(b)).div(RAY);\n}\n\nexport function rayDiv(a: BigNumberValue, b: BigNumberValue): BigNumber {\n  const halfB = valueToZDBigNumber(b).div(2);\n\n  return halfB.plus(valueToZDBigNumber(a).multipliedBy(RAY)).div(b);\n}\n\nexport function rayToWad(a: BigNumberValue): BigNumber {\n  const halfRatio = valueToZDBigNumber(WAD_RAY_RATIO).div(2);\n\n  return halfRatio.plus(a).div(WAD_RAY_RATIO);\n}\n\nexport function wadToRay(a: BigNumberValue): BigNumber {\n  return valueToZDBigNumber(a).multipliedBy(WAD_RAY_RATIO).decimalPlaces(0);\n}\n\nexport function rayPow(a: BigNumberValue, p: BigNumberValue): BigNumber {\n  let x = valueToZDBigNumber(a);\n  let n = valueToZDBigNumber(p);\n  let z = !n.modulo(2).eq(0) ? x : valueToZDBigNumber(RAY);\n\n  for (n = n.div(2); !n.eq(0); n = n.div(2)) {\n    x = rayMul(x, x);\n\n    if (!n.modulo(2).eq(0)) {\n      z = rayMul(z, x);\n    }\n  }\n  return z;\n}\n\n/**\n * RayPow is slow and gas intensive therefore in v2 we switched to binomial approximation on the contract level.\n * While the results ar not exact to the last decimal, they are close enough.\n */\nexport function binomialApproximatedRayPow(\n  a: BigNumberValue,\n  p: BigNumberValue\n): BigNumber {\n  const base = valueToZDBigNumber(a);\n  const exp = valueToZDBigNumber(p);\n  if (exp.eq(0)) return RAY;\n  const expMinusOne = exp.minus(1);\n  const expMinusTwo = exp.gt(2) ? exp.minus(2) : 0;\n\n  const basePowerTwo = rayMul(base, base);\n  const basePowerThree = rayMul(basePowerTwo, base);\n\n  const firstTerm = exp.multipliedBy(base);\n  const secondTerm = exp\n    .multipliedBy(expMinusOne)\n    .multipliedBy(basePowerTwo)\n    .div(2);\n  const thirdTerm = exp\n    .multipliedBy(expMinusOne)\n    .multipliedBy(expMinusTwo)\n    .multipliedBy(basePowerThree)\n    .div(6);\n\n  return RAY.plus(firstTerm).plus(secondTerm).plus(thirdTerm);\n}\n\nexport function rayToDecimal(a: BigNumberValue): BigNumber {\n  return valueToZDBigNumber(a).dividedBy(RAY);\n}\n","import { valueToBigNumber } from './bignumber';\n\nexport const SECONDS_PER_YEAR = valueToBigNumber('31536000');\nexport const ETH_DECIMALS = 18;\nexport const USD_DECIMALS = 10;\nexport const RAY_DECIMALS = 27;\n","import BigNumber from 'bignumber.js';\nimport * as RayMath from '../helpers/ray-math';\nimport {\n  ReserveData,\n  ComputedUserReserve,\n  UserReserveData,\n  UserSummaryData,\n  BorrowRateMode,\n  ReserveRatesData,\n} from './types';\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  normalize,\n  pow10,\n} from '../helpers/bignumber';\nimport {\n  ETH_DECIMALS,\n  RAY_DECIMALS,\n  SECONDS_PER_YEAR,\n  USD_DECIMALS,\n} from '../helpers/constants';\n\nexport type GetCompoundedBorrowBalanceParamsReserve = Pick<\n  ReserveData,\n  'variableBorrowRate' | 'lastUpdateTimestamp' | 'variableBorrowIndex'\n>;\nexport type GetCompoundedBorrowBalanceParamsUserReserve = Pick<\n  UserReserveData,\n  | 'principalBorrows'\n  | 'borrowRateMode'\n  | 'variableBorrowIndex'\n  | 'borrowRate'\n  | 'lastUpdateTimestamp'\n>;\n\nexport function getCompoundedBorrowBalance(\n  reserve: GetCompoundedBorrowBalanceParamsReserve,\n  userReserve: GetCompoundedBorrowBalanceParamsUserReserve,\n  currentTimestamp: number\n): BigNumber {\n  const principalBorrows = valueToZDBigNumber(userReserve.principalBorrows);\n  if (principalBorrows.eq('0')) {\n    return valueToZDBigNumber('0');\n  }\n\n  let cumulatedInterest;\n  if (userReserve.borrowRateMode === BorrowRateMode.Variable) {\n    let compoundedInterest = calculateCompoundedInterest(\n      reserve.variableBorrowRate,\n      currentTimestamp,\n      reserve.lastUpdateTimestamp\n    );\n\n    cumulatedInterest = RayMath.rayDiv(\n      RayMath.rayMul(compoundedInterest, reserve.variableBorrowIndex),\n      userReserve.variableBorrowIndex\n    );\n  } else {\n    // if stable\n    cumulatedInterest = calculateCompoundedInterest(\n      userReserve.borrowRate,\n      currentTimestamp,\n      userReserve.lastUpdateTimestamp\n    );\n  }\n\n  const borrowBalanceRay = RayMath.wadToRay(principalBorrows);\n\n  return RayMath.rayToWad(RayMath.rayMul(borrowBalanceRay, cumulatedInterest));\n}\n\nexport const calculateCompoundedInterest = (\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n): BigNumber => {\n  const timeDelta = valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp);\n  const ratePerSecond = valueToZDBigNumber(rate).dividedBy(SECONDS_PER_YEAR);\n  return RayMath.binomialApproximatedRayPow(ratePerSecond, timeDelta);\n};\n\nexport const calculateLinearInterest = (\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n) => {\n  const timeDelta = RayMath.wadToRay(\n    valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp)\n  );\n  const timeDeltaInSeconds = RayMath.rayDiv(\n    timeDelta,\n    RayMath.wadToRay(SECONDS_PER_YEAR)\n  );\n  return RayMath.rayMul(rate, timeDeltaInSeconds).plus(RayMath.RAY);\n};\n\nexport function calculateHealthFactorFromBalances(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  if (valueToBigNumber(borrowBalanceETH).eq(0)) {\n    return valueToBigNumber('-1'); // invalid number\n  }\n  return valueToBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLiquidationThreshold)\n    .dividedBy(100)\n    .div(valueToBigNumber(borrowBalanceETH).plus(totalFeesETH));\n}\n\nexport function calculateHealthFactorFromBalancesBigUnits(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  return calculateHealthFactorFromBalances(\n    collateralBalanceETH,\n    borrowBalanceETH,\n    totalFeesETH,\n    new BigNumber(currentLiquidationThreshold)\n      .multipliedBy(100)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN)\n  );\n}\n\nexport function calculateAvailableBorrowsETH(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  totalFeesETH: BigNumberValue,\n  currentLtv: BigNumberValue\n): BigNumber {\n  if (valueToZDBigNumber(currentLtv).eq(0)) {\n    return valueToZDBigNumber('0');\n  }\n  let availableBorrowsETH = valueToZDBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLtv)\n    .dividedBy(100);\n  if (availableBorrowsETH.lt(borrowBalanceETH)) {\n    return valueToZDBigNumber('0');\n  }\n  availableBorrowsETH = availableBorrowsETH\n    .minus(borrowBalanceETH)\n    .minus(totalFeesETH);\n  const borrowFee = availableBorrowsETH.multipliedBy('0.0025');\n  return availableBorrowsETH.minus(borrowFee);\n}\n\nexport type GetReserveNormalizedIncomeReserve = Pick<\n  ReserveData,\n  'liquidityRate' | 'liquidityIndex' | 'lastUpdateTimestamp'\n>;\n\nexport function getReserveNormalizedIncome(\n  reserve: GetReserveNormalizedIncomeReserve,\n  currentTimestamp: number\n): BigNumber {\n  const { liquidityRate, liquidityIndex, lastUpdateTimestamp } = reserve;\n  if (valueToZDBigNumber(liquidityRate).eq('0')) {\n    return valueToZDBigNumber(liquidityIndex);\n  }\n\n  const cumulatedInterest = calculateLinearInterest(\n    liquidityRate,\n    currentTimestamp,\n    lastUpdateTimestamp\n  );\n\n  return RayMath.rayMul(cumulatedInterest, liquidityIndex);\n}\n\nexport type CalculateCumulatedBalancePoolReserve = GetReserveNormalizedIncomeReserve;\nexport type CalculateCumulatedBalanceUserReserve = Pick<\n  UserReserveData,\n  'userBalanceIndex'\n>;\n\nexport function calculateCumulatedBalance(\n  balance: BigNumberValue,\n  userReserve: CalculateCumulatedBalanceUserReserve,\n  poolReserve: CalculateCumulatedBalancePoolReserve,\n  currentTimestamp: number\n): BigNumber {\n  return RayMath.rayToWad(\n    RayMath.rayDiv(\n      RayMath.rayMul(\n        RayMath.wadToRay(balance),\n        getReserveNormalizedIncome(poolReserve, currentTimestamp)\n      ),\n      userReserve.userBalanceIndex\n    )\n  );\n}\n\nexport type CalculateCurrentUnderlyingBalancePoolReserve = CalculateCumulatedBalancePoolReserve;\nexport type CalculateCurrentUnderlyingBalanceUserReserve = CalculateCumulatedBalanceUserReserve &\n  Pick<\n    UserReserveData,\n    | 'principalATokenBalance'\n    | 'redirectedBalance'\n    | 'interestRedirectionAddress'\n  >;\n\nexport function calculateCurrentUnderlyingBalance(\n  userReserve: CalculateCurrentUnderlyingBalanceUserReserve,\n  poolReserve: CalculateCurrentUnderlyingBalancePoolReserve,\n  currentTimestamp: number\n): BigNumber {\n  if (\n    userReserve.principalATokenBalance === '0' &&\n    userReserve.redirectedBalance === '0'\n  ) {\n    return valueToZDBigNumber('0');\n  }\n  if (\n    userReserve.interestRedirectionAddress !==\n    '0x0000000000000000000000000000000000000000'\n  ) {\n    return valueToZDBigNumber(userReserve.principalATokenBalance).plus(\n      calculateCumulatedBalance(\n        userReserve.redirectedBalance,\n        userReserve,\n        poolReserve,\n        currentTimestamp\n      ).minus(userReserve.redirectedBalance)\n    );\n  }\n  return calculateCumulatedBalance(\n    valueToBigNumber(userReserve.redirectedBalance)\n      .plus(userReserve.principalATokenBalance)\n      .toString(),\n    userReserve,\n    poolReserve,\n    currentTimestamp\n  ).minus(userReserve.redirectedBalance);\n}\n\nfunction computeUserReserveData(\n  poolReserve: ReserveData,\n  userReserve: UserReserveData,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): ComputedUserReserve {\n  const {\n    price: { priceInEth },\n    decimals,\n  } = poolReserve;\n  const currentUnderlyingBalance = calculateCurrentUnderlyingBalance(\n    userReserve,\n    poolReserve,\n    currentTimestamp\n  );\n  const currentUnderlyingBalanceETH = currentUnderlyingBalance\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const currentUnderlyingBalanceUSD = currentUnderlyingBalanceETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const principalBorrowsETH = valueToZDBigNumber(userReserve.principalBorrows)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const principalBorrowsUSD = principalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const currentBorrows = getCompoundedBorrowBalance(\n    poolReserve,\n    userReserve,\n    currentTimestamp\n  );\n  const currentBorrowsETH = currentBorrows\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const currentBorrowsUSD = currentBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  const originationFeeETH = valueToZDBigNumber(userReserve.originationFee)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const originationFeeUSD = originationFeeETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n\n  return {\n    ...userReserve,\n    principalBorrowsUSD,\n    currentBorrowsUSD,\n    originationFeeUSD,\n    currentUnderlyingBalanceUSD,\n    originationFeeETH: originationFeeETH.toString(),\n    currentBorrows: currentBorrows.toString(),\n    currentBorrowsETH: currentBorrowsETH.toString(),\n    principalBorrowsETH: principalBorrowsETH.toString(),\n    currentUnderlyingBalance: currentUnderlyingBalance.toFixed(),\n    currentUnderlyingBalanceETH: currentUnderlyingBalanceETH.toFixed(),\n  };\n}\n\nexport function computeRawUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  let totalLiquidityETH = valueToZDBigNumber('0');\n  let totalCollateralETH = valueToZDBigNumber('0');\n  let totalBorrowsETH = valueToZDBigNumber('0');\n  let totalFeesETH = valueToZDBigNumber('0');\n  let currentLtv = valueToBigNumber('0');\n  let currentLiquidationThreshold = valueToBigNumber('0');\n\n  const userReservesData = rawUserReserves\n    .map((userReserve) => {\n      const poolReserve = poolReservesData.find(\n        (reserve) => reserve.id === userReserve.reserve.id\n      );\n      if (!poolReserve) {\n        throw new Error(\n          'Reserve is not registered on platform, please contact support'\n        );\n      }\n      const computedUserReserve = computeUserReserveData(\n        poolReserve,\n        userReserve,\n        usdPriceEth,\n        currentTimestamp\n      );\n      totalLiquidityETH = totalLiquidityETH.plus(\n        computedUserReserve.currentUnderlyingBalanceETH\n      );\n      totalBorrowsETH = totalBorrowsETH.plus(\n        computedUserReserve.currentBorrowsETH\n      );\n      totalFeesETH = totalFeesETH.plus(computedUserReserve.originationFeeETH);\n\n      // asset enabled as collateral\n      if (\n        poolReserve.usageAsCollateralEnabled &&\n        userReserve.usageAsCollateralEnabledOnUser\n      ) {\n        totalCollateralETH = totalCollateralETH.plus(\n          computedUserReserve.currentUnderlyingBalanceETH\n        );\n        currentLtv = currentLtv.plus(\n          valueToBigNumber(\n            computedUserReserve.currentUnderlyingBalanceETH\n          ).multipliedBy(poolReserve.baseLTVasCollateral)\n        );\n        currentLiquidationThreshold = currentLiquidationThreshold.plus(\n          valueToBigNumber(\n            computedUserReserve.currentUnderlyingBalanceETH\n          ).multipliedBy(poolReserve.reserveLiquidationThreshold)\n        );\n      }\n      return computedUserReserve;\n    })\n    .sort((a, b) =>\n      a.reserve.symbol > b.reserve.symbol\n        ? 1\n        : a.reserve.symbol < b.reserve.symbol\n        ? -1\n        : 0\n    );\n\n  if (currentLtv.gt(0)) {\n    currentLtv = currentLtv\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n  if (currentLiquidationThreshold.gt(0)) {\n    currentLiquidationThreshold = currentLiquidationThreshold\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n\n  const healthFactor = calculateHealthFactorFromBalances(\n    totalCollateralETH,\n    totalBorrowsETH,\n    totalFeesETH,\n    currentLiquidationThreshold\n  );\n\n  const totalCollateralUSD = totalCollateralETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalLiquidityUSD = totalLiquidityETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalBorrowsUSD = totalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalFeesUSD = totalFeesETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth);\n\n  const totalBorrowsWithFeesETH = totalFeesETH.plus(totalBorrowsETH);\n  const totalBorrowsWithFeesUSD = totalFeesUSD.plus(totalBorrowsUSD);\n  const availableBorrowsETH = calculateAvailableBorrowsETH(\n    totalCollateralETH,\n    totalBorrowsETH,\n    totalFeesETH,\n    currentLtv\n  );\n\n  const totalBorrowsAndFeesETH = totalBorrowsETH.plus(totalFeesETH);\n  const maxAmountToWithdrawInEth = totalLiquidityETH.minus(\n    totalBorrowsAndFeesETH.eq(0)\n      ? '0'\n      : totalBorrowsAndFeesETH\n          .multipliedBy(100)\n          .dividedBy(currentLiquidationThreshold)\n  );\n\n  return {\n    totalLiquidityUSD,\n    totalCollateralUSD,\n    totalBorrowsUSD,\n    id: userId,\n    totalLiquidityETH: totalLiquidityETH.toString(),\n    totalCollateralETH: totalCollateralETH.toString(),\n    totalFeesETH: totalFeesETH.toString(),\n    totalBorrowsETH: totalBorrowsETH.toString(),\n    availableBorrowsETH: availableBorrowsETH.toString(),\n    currentLoanToValue: currentLtv.toString(),\n    currentLiquidationThreshold: currentLiquidationThreshold.toString(),\n    maxAmountToWithdrawInEth: maxAmountToWithdrawInEth.toString(),\n    healthFactor: healthFactor.toString(),\n    reservesData: userReservesData,\n    totalFeesUSD: totalFeesUSD.toString(),\n    totalBorrowsWithFeesETH: totalBorrowsWithFeesETH.toString(),\n    totalBorrowsWithFeesUSD: totalBorrowsWithFeesUSD.toString(),\n  };\n}\n\nexport function formatUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  const userData = computeRawUserSummaryData(\n    poolReservesData,\n    rawUserReserves,\n    userId,\n    usdPriceEth,\n    currentTimestamp\n  );\n  const userReservesData = userData.reservesData.map(\n    ({ reserve, ...userReserve }): ComputedUserReserve => {\n      const reserveDecimals = reserve.decimals;\n      return {\n        ...userReserve,\n        reserve: {\n          ...reserve,\n          reserveLiquidationBonus: normalize(\n            valueToBigNumber(reserve.reserveLiquidationBonus).minus(100),\n            2\n          ),\n          liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n        },\n        redirectedBalance: normalize(\n          userReserve.redirectedBalance,\n          reserveDecimals\n        ),\n        principalATokenBalance: normalize(\n          userReserve.principalATokenBalance,\n          reserveDecimals\n        ),\n        borrowRate: normalize(userReserve.borrowRate, RAY_DECIMALS),\n        lastUpdateTimestamp: userReserve.lastUpdateTimestamp,\n        variableBorrowIndex: normalize(\n          userReserve.variableBorrowIndex,\n          RAY_DECIMALS\n        ),\n        userBalanceIndex: normalize(userReserve.userBalanceIndex, RAY_DECIMALS),\n        currentUnderlyingBalance: normalize(\n          userReserve.currentUnderlyingBalance,\n          reserveDecimals\n        ),\n        currentUnderlyingBalanceETH: normalize(\n          userReserve.currentUnderlyingBalanceETH,\n          ETH_DECIMALS\n        ),\n        currentUnderlyingBalanceUSD: normalize(\n          userReserve.currentUnderlyingBalanceUSD,\n          USD_DECIMALS\n        ),\n        principalBorrows: normalize(\n          userReserve.principalBorrows,\n          reserveDecimals\n        ),\n        principalBorrowsETH: normalize(\n          userReserve.principalBorrowsETH,\n          ETH_DECIMALS\n        ),\n        principalBorrowsUSD: normalize(\n          userReserve.principalBorrowsUSD,\n          USD_DECIMALS\n        ),\n        currentBorrows: normalize(userReserve.currentBorrows, reserveDecimals),\n        currentBorrowsETH: normalize(\n          userReserve.currentBorrowsETH,\n          ETH_DECIMALS\n        ),\n        currentBorrowsUSD: normalize(\n          userReserve.currentBorrowsUSD,\n          USD_DECIMALS\n        ),\n        originationFee: normalize(userReserve.originationFee, reserveDecimals),\n        originationFeeETH: normalize(\n          userReserve.originationFeeETH,\n          ETH_DECIMALS\n        ),\n        originationFeeUSD: normalize(\n          userReserve.originationFeeUSD,\n          USD_DECIMALS\n        ),\n      };\n    }\n  );\n  return {\n    id: userData.id,\n    reservesData: userReservesData,\n    totalLiquidityETH: normalize(userData.totalLiquidityETH, ETH_DECIMALS),\n    totalLiquidityUSD: normalize(userData.totalLiquidityUSD, USD_DECIMALS),\n    totalCollateralETH: normalize(userData.totalCollateralETH, ETH_DECIMALS),\n    totalCollateralUSD: normalize(userData.totalCollateralUSD, USD_DECIMALS),\n    totalFeesETH: normalize(userData.totalFeesETH, ETH_DECIMALS),\n    totalFeesUSD: normalize(userData.totalFeesUSD, USD_DECIMALS),\n    totalBorrowsETH: normalize(userData.totalBorrowsETH, ETH_DECIMALS),\n    totalBorrowsUSD: normalize(userData.totalBorrowsUSD, USD_DECIMALS),\n    totalBorrowsWithFeesETH: normalize(\n      userData.totalBorrowsWithFeesETH,\n      ETH_DECIMALS\n    ),\n    totalBorrowsWithFeesUSD: normalize(\n      userData.totalBorrowsWithFeesUSD,\n      USD_DECIMALS\n    ),\n    availableBorrowsETH: normalize(userData.availableBorrowsETH, ETH_DECIMALS),\n    currentLoanToValue: normalize(userData.currentLoanToValue, 2),\n    currentLiquidationThreshold: normalize(\n      userData.currentLiquidationThreshold,\n      2\n    ),\n    maxAmountToWithdrawInEth: normalize(\n      userData.maxAmountToWithdrawInEth,\n      ETH_DECIMALS\n    ),\n    healthFactor: userData.healthFactor,\n  };\n}\n\nexport function calculateAverageRate(\n  index0: string,\n  index1: string,\n  timestamp0: number,\n  timestamp1: number\n): string {\n  return new BigNumber(index1)\n    .dividedBy(index0)\n    .minus('1')\n    .dividedBy(timestamp1 - timestamp0)\n    .multipliedBy('31536000')\n    .toString();\n}\n\nexport function formatReserves(\n  reserves: ReserveData[],\n  reserveIndexes30DaysAgo?: ReserveRatesData[]\n): ReserveData[] {\n  return reserves.map((reserve) => {\n    const reserve30DaysAgo = reserveIndexes30DaysAgo?.find(\n      (res) => res.id === reserve.id\n    )?.paramsHistory?.[0];\n\n    return {\n      ...reserve,\n      price: {\n        ...reserve.price,\n        priceInEth: normalize(reserve.price.priceInEth, ETH_DECIMALS),\n      },\n      baseLTVasCollateral: normalize(reserve.baseLTVasCollateral, 2),\n      variableBorrowRate: normalize(reserve.variableBorrowRate, RAY_DECIMALS),\n      avg30DaysVariableBorrowRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.variableBorrowIndex,\n            reserve.variableBorrowIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n      avg30DaysLiquidityRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.liquidityIndex,\n            reserve.liquidityIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n\n      stableBorrowRate: normalize(reserve.stableBorrowRate, RAY_DECIMALS),\n      liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n      totalLiquidity: normalize(reserve.totalLiquidity, reserve.decimals),\n      availableLiquidity: normalize(\n        reserve.availableLiquidity,\n        reserve.decimals\n      ),\n      liquidityIndex: normalize(reserve.liquidityIndex, RAY_DECIMALS),\n      reserveLiquidationThreshold: normalize(\n        reserve.reserveLiquidationThreshold,\n        2\n      ),\n      reserveLiquidationBonus: normalize(\n        valueToBigNumber(reserve.reserveLiquidationBonus).minus(100),\n        2\n      ),\n      totalBorrows: normalize(reserve.totalBorrows, reserve.decimals),\n      totalBorrowsVariable: normalize(\n        reserve.totalBorrowsVariable,\n        reserve.decimals\n      ),\n      totalBorrowsStable: normalize(\n        reserve.totalBorrowsStable,\n        reserve.decimals\n      ),\n      variableBorrowIndex: normalize(reserve.variableBorrowIndex, RAY_DECIMALS),\n    };\n  });\n}\n\nexport function calculateInterestRates(\n  reserve: ReserveData,\n  amountToDeposit: BigNumberValue,\n  amountToBorrow: BigNumberValue,\n  borrowMode: 'stable' | 'variable' = 'variable'\n) {\n  const { optimalUtilisationRate } = reserve;\n  const baseVariableBorrowRate = valueToBigNumber(\n    reserve.baseVariableBorrowRate\n  );\n  const totalBorrowsStable = valueToBigNumber(reserve.totalBorrowsStable).plus(\n    borrowMode === 'stable' ? amountToBorrow : '0'\n  );\n  const totalBorrowsVariable = valueToBigNumber(\n    reserve.totalBorrowsVariable\n  ).plus(borrowMode === 'variable' ? amountToBorrow : '0');\n  const totalBorrows = totalBorrowsStable.plus(totalBorrowsVariable);\n  const totalDeposits = valueToBigNumber(reserve.totalLiquidity).plus(\n    amountToDeposit\n  );\n  const utilizationRate =\n    totalDeposits.eq(0) && totalBorrows.eq(0)\n      ? valueToBigNumber(0)\n      : totalBorrows.dividedBy(totalDeposits);\n\n  let currentStableBorrowRate = valueToBigNumber(reserve.stableBorrowRate);\n  let currentVariableBorrowRate = valueToBigNumber(0);\n  let currentLiquidityRate = valueToBigNumber(0);\n\n  if (utilizationRate.gt(optimalUtilisationRate)) {\n    const excessUtilizationRateRatio = utilizationRate\n      .minus(optimalUtilisationRate)\n      .dividedBy(valueToBigNumber(1).minus(optimalUtilisationRate));\n\n    currentStableBorrowRate = currentStableBorrowRate\n      .plus(reserve.stableRateSlope1)\n      .plus(excessUtilizationRateRatio.multipliedBy(reserve.stableRateSlope2));\n    currentVariableBorrowRate = baseVariableBorrowRate\n      .plus(reserve.variableRateSlope1)\n      .plus(\n        excessUtilizationRateRatio.multipliedBy(reserve.variableRateSlope2)\n      );\n  } else {\n    currentStableBorrowRate = currentVariableBorrowRate.plus(\n      utilizationRate\n        .dividedBy(optimalUtilisationRate)\n        .multipliedBy(reserve.stableRateSlope1)\n    );\n    currentVariableBorrowRate = baseVariableBorrowRate.plus(\n      utilizationRate\n        .dividedBy(optimalUtilisationRate)\n        .multipliedBy(reserve.variableRateSlope1)\n    );\n  }\n\n  if (!totalBorrows.eq(0)) {\n    const weightedVariableRate = currentVariableBorrowRate.multipliedBy(\n      totalBorrowsVariable\n    );\n    const weightedStableRate = valueToBigNumber(\n      reserve.averageStableBorrowRate\n    ).multipliedBy(totalBorrowsStable);\n\n    currentLiquidityRate = weightedVariableRate\n      .plus(weightedStableRate)\n      .dividedBy(totalBorrows);\n  }\n\n  return {\n    variableBorrowRate: currentVariableBorrowRate.toString(),\n    stableBorrowRate: currentStableBorrowRate.toString(),\n    liquidityRate: currentLiquidityRate.toString(),\n  };\n}\n","import BigNumber from 'bignumber.js';\n\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  pow10,\n} from './bignumber';\nimport * as RayMath from './ray-math';\nimport { SECONDS_PER_YEAR } from './constants';\n\nexport const LTV_PRECISION = 4;\n\nexport function calculateCompoundedInterest(\n  rate: BigNumberValue,\n  currentTimestamp: number,\n  lastUpdateTimestamp: number\n): BigNumber {\n  const timeDelta = valueToZDBigNumber(currentTimestamp - lastUpdateTimestamp);\n  const ratePerSecond = valueToZDBigNumber(rate).dividedBy(SECONDS_PER_YEAR);\n  return RayMath.binomialApproximatedRayPow(ratePerSecond, timeDelta);\n}\n\nexport function getCompoundedBalance(\n  _principalBalance: BigNumberValue,\n  _reserveIndex: BigNumberValue,\n  _reserveRate: BigNumberValue,\n  _lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  const principalBalance = valueToZDBigNumber(_principalBalance);\n  if (principalBalance.eq('0')) {\n    return principalBalance;\n  }\n\n  const compoundedInterest = calculateCompoundedInterest(\n    _reserveRate,\n    currentTimestamp,\n    _lastUpdateTimestamp\n  );\n  const cumulatedInterest = RayMath.rayMul(compoundedInterest, _reserveIndex);\n  const principalBalanceRay = RayMath.wadToRay(principalBalance);\n\n  return RayMath.rayToWad(\n    RayMath.rayMul(principalBalanceRay, cumulatedInterest)\n  );\n}\n\nexport function getCompoundedStableBalance(\n  _principalBalance: BigNumberValue,\n  _userStableRate: BigNumberValue,\n  _lastUpdateTimestamp: number,\n  currentTimestamp: number\n): BigNumber {\n  const principalBalance = valueToZDBigNumber(_principalBalance);\n  if (principalBalance.eq('0')) {\n    return principalBalance;\n  }\n\n  const cumulatedInterest = calculateCompoundedInterest(\n    _userStableRate,\n    currentTimestamp,\n    _lastUpdateTimestamp\n  );\n  const principalBalanceRay = RayMath.wadToRay(principalBalance);\n\n  return RayMath.rayToWad(\n    RayMath.rayMul(principalBalanceRay, cumulatedInterest)\n  );\n}\n\nexport function calculateHealthFactorFromBalances(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  if (valueToBigNumber(borrowBalanceETH).eq(0)) {\n    return valueToBigNumber('-1'); // invalid number\n  }\n  return valueToBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLiquidationThreshold)\n    .dividedBy(pow10(LTV_PRECISION))\n    .div(borrowBalanceETH);\n}\n\nexport function calculateHealthFactorFromBalancesBigUnits(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLiquidationThreshold: BigNumberValue\n): BigNumber {\n  return calculateHealthFactorFromBalances(\n    collateralBalanceETH,\n    borrowBalanceETH,\n    new BigNumber(currentLiquidationThreshold)\n      .multipliedBy(pow10(LTV_PRECISION))\n      .decimalPlaces(0, BigNumber.ROUND_DOWN)\n  );\n}\n\nexport function calculateAvailableBorrowsETH(\n  collateralBalanceETH: BigNumberValue,\n  borrowBalanceETH: BigNumberValue,\n  currentLtv: BigNumberValue\n): BigNumber {\n  if (valueToZDBigNumber(currentLtv).eq(0)) {\n    return valueToZDBigNumber('0');\n  }\n  const availableBorrowsETH = valueToZDBigNumber(collateralBalanceETH)\n    .multipliedBy(currentLtv)\n    .dividedBy(pow10(LTV_PRECISION))\n    .minus(borrowBalanceETH);\n  return availableBorrowsETH.gt('0')\n    ? availableBorrowsETH\n    : valueToZDBigNumber('0');\n}\n\nexport function calculateAverageRate(\n  index0: string,\n  index1: string,\n  timestamp0: number,\n  timestamp1: number\n): string {\n  return valueToBigNumber(index1)\n    .dividedBy(index0)\n    .minus('1')\n    .dividedBy(timestamp1 - timestamp0)\n    .multipliedBy(SECONDS_PER_YEAR)\n    .toString();\n}\n","import BigNumber from 'bignumber.js';\n\nimport {\n  BigNumberValue,\n  valueToBigNumber,\n  valueToZDBigNumber,\n  normalize,\n  pow10,\n} from '../helpers/bignumber';\nimport {\n  calculateAvailableBorrowsETH,\n  calculateHealthFactorFromBalances,\n  getCompoundedBalance,\n  getCompoundedStableBalance,\n  calculateAverageRate,\n  LTV_PRECISION,\n  calculateCompoundedInterest,\n} from '../helpers/pool-math';\nimport { rayMul } from '../helpers/ray-math';\nimport {\n  ComputedUserReserve,\n  ReserveData,\n  UserReserveData,\n  UserSummaryData,\n  ReserveRatesData,\n  ComputedReserveData,\n} from './types';\nimport { ETH_DECIMALS, RAY_DECIMALS, USD_DECIMALS } from '../helpers/constants';\n\nexport function getEthAndUsdBalance(\n  balance: BigNumberValue,\n  priceInEth: BigNumberValue,\n  decimals: number,\n  usdPriceEth: BigNumberValue\n): [string, string] {\n  const balanceInEth = valueToZDBigNumber(balance)\n    .multipliedBy(priceInEth)\n    .dividedBy(pow10(decimals));\n  const balanceInUsd = balanceInEth\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toFixed(0);\n  return [balanceInEth.toString(), balanceInUsd];\n}\n\n/*\ntype ComputeUserReserveDataPoolReserve = Pick<\n  ReserveData,\n  | 'price'\n  | 'decimals'\n  | 'liquidityIndex'\n  | 'liquidityRate'\n  | 'lastUpdateTimestamp'\n  | 'variableBorrowIndex'\n  | 'variableBorrowRate'\n>;\n\ntype ComputeUserReserveDataUserReserve = Pick<\n  UserReserveData,\n  | 'scaledATokenBalance'\n  | 'scaledVariableDebt'\n  | 'principalStableDebt'\n  | 'stableBorrowRate'\n  | 'stableBorrowLastUpdateTimestamp'\n>;\n*/\n\nexport function computeUserReserveData(\n  poolReserve: ReserveData,\n  userReserve: UserReserveData,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): ComputedUserReserve {\n  const {\n    price: { priceInEth },\n    decimals,\n  } = poolReserve;\n  const underlyingBalance = getCompoundedBalance(\n    userReserve.scaledATokenBalance,\n    poolReserve.liquidityIndex,\n    poolReserve.liquidityRate,\n    poolReserve.lastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n  const [underlyingBalanceETH, underlyingBalanceUSD] = getEthAndUsdBalance(\n    underlyingBalance,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  const variableBorrows = getCompoundedBalance(\n    userReserve.scaledVariableDebt,\n    poolReserve.variableBorrowIndex,\n    poolReserve.variableBorrowRate,\n    poolReserve.lastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n\n  const [variableBorrowsETH, variableBorrowsUSD] = getEthAndUsdBalance(\n    variableBorrows,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  const stableBorrows = getCompoundedStableBalance(\n    userReserve.principalStableDebt,\n    userReserve.stableBorrowRate,\n    userReserve.stableBorrowLastUpdateTimestamp,\n    currentTimestamp\n  ).toString();\n\n  const [stableBorrowsETH, stableBorrowsUSD] = getEthAndUsdBalance(\n    stableBorrows,\n    priceInEth,\n    decimals,\n    usdPriceEth\n  );\n\n  return {\n    ...userReserve,\n    underlyingBalance,\n    underlyingBalanceETH,\n    underlyingBalanceUSD,\n    variableBorrows,\n    variableBorrowsETH,\n    variableBorrowsUSD,\n    stableBorrows,\n    stableBorrowsETH,\n    stableBorrowsUSD,\n    totalBorrows: valueToZDBigNumber(variableBorrows)\n      .plus(stableBorrows)\n      .toString(),\n    totalBorrowsETH: valueToZDBigNumber(variableBorrowsETH)\n      .plus(stableBorrowsETH)\n      .toString(),\n    totalBorrowsUSD: valueToZDBigNumber(variableBorrowsUSD)\n      .plus(stableBorrowsUSD)\n      .toString(),\n  };\n}\n\nexport function computeRawUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  let totalLiquidityETH = valueToZDBigNumber('0');\n  let totalCollateralETH = valueToZDBigNumber('0');\n  let totalBorrowsETH = valueToZDBigNumber('0');\n  let currentLtv = valueToBigNumber('0');\n  let currentLiquidationThreshold = valueToBigNumber('0');\n\n  const userReservesData = rawUserReserves\n    .map((userReserve) => {\n      const poolReserve = poolReservesData.find(\n        (reserve) => reserve.id === userReserve.reserve.id\n      );\n      if (!poolReserve) {\n        throw new Error(\n          'Reserve is not registered on platform, please contact support'\n        );\n      }\n      const computedUserReserve = computeUserReserveData(\n        poolReserve,\n        userReserve,\n        usdPriceEth,\n        currentTimestamp\n      );\n      totalLiquidityETH = totalLiquidityETH.plus(\n        computedUserReserve.underlyingBalanceETH\n      );\n      totalBorrowsETH = totalBorrowsETH\n        .plus(computedUserReserve.variableBorrowsETH)\n        .plus(computedUserReserve.stableBorrowsETH);\n\n      // asset enabled as collateral\n      if (\n        poolReserve.usageAsCollateralEnabled &&\n        userReserve.usageAsCollateralEnabledOnUser\n      ) {\n        totalCollateralETH = totalCollateralETH.plus(\n          computedUserReserve.underlyingBalanceETH\n        );\n        currentLtv = currentLtv.plus(\n          valueToBigNumber(\n            computedUserReserve.underlyingBalanceETH\n          ).multipliedBy(poolReserve.baseLTVasCollateral)\n        );\n        currentLiquidationThreshold = currentLiquidationThreshold.plus(\n          valueToBigNumber(\n            computedUserReserve.underlyingBalanceETH\n          ).multipliedBy(poolReserve.reserveLiquidationThreshold)\n        );\n      }\n      return computedUserReserve;\n    })\n    .sort((a, b) =>\n      a.reserve.symbol > b.reserve.symbol\n        ? 1\n        : a.reserve.symbol < b.reserve.symbol\n        ? -1\n        : 0\n    );\n\n  if (currentLtv.gt(0)) {\n    currentLtv = currentLtv\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n  if (currentLiquidationThreshold.gt(0)) {\n    currentLiquidationThreshold = currentLiquidationThreshold\n      .div(totalCollateralETH)\n      .decimalPlaces(0, BigNumber.ROUND_DOWN);\n  }\n\n  const healthFactor = calculateHealthFactorFromBalances(\n    totalCollateralETH,\n    totalBorrowsETH,\n    currentLiquidationThreshold\n  );\n\n  const totalCollateralUSD = totalCollateralETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalLiquidityUSD = totalLiquidityETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const totalBorrowsUSD = totalBorrowsETH\n    .multipliedBy(pow10(USD_DECIMALS))\n    .dividedBy(usdPriceEth)\n    .toString();\n\n  const availableBorrowsETH = calculateAvailableBorrowsETH(\n    totalCollateralETH,\n    totalBorrowsETH,\n    currentLtv\n  );\n\n  return {\n    totalLiquidityUSD,\n    totalCollateralUSD,\n    totalBorrowsUSD,\n    id: userId,\n    totalLiquidityETH: totalLiquidityETH.toString(),\n    totalCollateralETH: totalCollateralETH.toString(),\n    totalBorrowsETH: totalBorrowsETH.toString(),\n    availableBorrowsETH: availableBorrowsETH.toString(),\n    currentLoanToValue: currentLtv.toString(),\n    currentLiquidationThreshold: currentLiquidationThreshold.toString(),\n    healthFactor: healthFactor.toString(),\n    reservesData: userReservesData,\n  };\n}\n\nexport function formatUserSummaryData(\n  poolReservesData: ReserveData[],\n  rawUserReserves: UserReserveData[],\n  userId: string,\n  usdPriceEth: BigNumberValue,\n  currentTimestamp: number\n): UserSummaryData {\n  const userData = computeRawUserSummaryData(\n    poolReservesData,\n    rawUserReserves,\n    userId,\n    usdPriceEth,\n    currentTimestamp\n  );\n  const userReservesData = userData.reservesData.map(\n    ({ reserve, ...userReserve }): ComputedUserReserve => {\n      const reserveDecimals = reserve.decimals;\n      return {\n        ...userReserve,\n        reserve: {\n          ...reserve,\n          reserveLiquidationBonus: normalize(\n            valueToBigNumber(reserve.reserveLiquidationBonus).minus(\n              pow10(LTV_PRECISION)\n            ),\n            4\n          ),\n          liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n        },\n        scaledATokenBalance: normalize(\n          userReserve.scaledATokenBalance,\n          reserveDecimals\n        ),\n        stableBorrowRate: normalize(userReserve.stableBorrowRate, RAY_DECIMALS),\n        variableBorrowIndex: normalize(\n          userReserve.variableBorrowIndex,\n          RAY_DECIMALS\n        ),\n        underlyingBalance: normalize(\n          userReserve.underlyingBalance,\n          reserveDecimals\n        ),\n        underlyingBalanceETH: normalize(\n          userReserve.underlyingBalanceETH,\n          ETH_DECIMALS\n        ),\n        underlyingBalanceUSD: normalize(\n          userReserve.underlyingBalanceUSD,\n          USD_DECIMALS\n        ),\n        stableBorrows: normalize(userReserve.stableBorrows, reserveDecimals),\n        stableBorrowsETH: normalize(userReserve.stableBorrowsETH, ETH_DECIMALS),\n        stableBorrowsUSD: normalize(userReserve.stableBorrowsUSD, USD_DECIMALS),\n        variableBorrows: normalize(\n          userReserve.variableBorrows,\n          reserveDecimals\n        ),\n        variableBorrowsETH: normalize(\n          userReserve.variableBorrowsETH,\n          ETH_DECIMALS\n        ),\n        variableBorrowsUSD: normalize(\n          userReserve.variableBorrowsUSD,\n          USD_DECIMALS\n        ),\n        totalBorrows: normalize(userReserve.totalBorrows, reserveDecimals),\n        totalBorrowsETH: normalize(userReserve.totalBorrowsETH, ETH_DECIMALS),\n        totalBorrowsUSD: normalize(userReserve.totalBorrowsUSD, USD_DECIMALS),\n      };\n    }\n  );\n  return {\n    id: userData.id,\n    reservesData: userReservesData,\n    totalLiquidityETH: normalize(userData.totalLiquidityETH, ETH_DECIMALS),\n    totalLiquidityUSD: normalize(userData.totalLiquidityUSD, USD_DECIMALS),\n    totalCollateralETH: normalize(userData.totalCollateralETH, ETH_DECIMALS),\n    totalCollateralUSD: normalize(userData.totalCollateralUSD, USD_DECIMALS),\n    totalBorrowsETH: normalize(userData.totalBorrowsETH, ETH_DECIMALS),\n    totalBorrowsUSD: normalize(userData.totalBorrowsUSD, USD_DECIMALS),\n    availableBorrowsETH: normalize(userData.availableBorrowsETH, ETH_DECIMALS),\n    currentLoanToValue: normalize(userData.currentLoanToValue, 4),\n    currentLiquidationThreshold: normalize(\n      userData.currentLiquidationThreshold,\n      4\n    ),\n    healthFactor: userData.healthFactor,\n  };\n}\n\nexport function formatReserves(\n  reserves: ReserveData[],\n  currentTimestamp: number,\n  reserveIndexes30DaysAgo?: ReserveRatesData[]\n): ComputedReserveData[] {\n  return reserves.map((reserve) => {\n    const reserve30DaysAgo = reserveIndexes30DaysAgo?.find(\n      (res) => res.id === reserve.id\n    )?.paramsHistory?.[0];\n\n    const availableLiquidity = normalize(\n      reserve.availableLiquidity,\n      reserve.decimals\n    );\n\n    const totalVariableDebt = normalize(\n      rayMul(reserve.totalScaledVariableDebt, reserve.variableBorrowIndex),\n      reserve.decimals\n    );\n    const totalStableDebt = normalize(\n      rayMul(\n        reserve.totalPrincipalStableDebt,\n        calculateCompoundedInterest(\n          reserve.averageStableRate,\n          currentTimestamp,\n          reserve.stableDebtLastUpdateTimestamp\n        )\n      ),\n      reserve.decimals\n    );\n\n    const totalDebt = valueToBigNumber(totalStableDebt).plus(totalVariableDebt);\n\n    const totalLiquidity = totalDebt.plus(availableLiquidity).toString();\n    const utilizationRate =\n      totalLiquidity !== '0'\n        ? totalDebt.dividedBy(totalLiquidity).toString()\n        : '0';\n    return {\n      ...reserve,\n      totalVariableDebt,\n      totalStableDebt,\n      totalLiquidity,\n      availableLiquidity,\n      utilizationRate,\n      totalDebt: totalDebt.toString(),\n      price: {\n        ...reserve.price,\n        priceInEth: normalize(reserve.price.priceInEth, ETH_DECIMALS),\n      },\n      baseLTVasCollateral: normalize(\n        reserve.baseLTVasCollateral,\n        LTV_PRECISION\n      ),\n      reserveFactor: normalize(reserve.reserveFactor, LTV_PRECISION),\n      variableBorrowRate: normalize(reserve.variableBorrowRate, RAY_DECIMALS),\n      avg30DaysVariableBorrowRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.variableBorrowIndex,\n            reserve.variableBorrowIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n      avg30DaysLiquidityRate: reserve30DaysAgo\n        ? calculateAverageRate(\n            reserve30DaysAgo.liquidityIndex,\n            reserve.liquidityIndex,\n            reserve30DaysAgo.timestamp,\n            reserve.lastUpdateTimestamp\n          )\n        : undefined,\n\n      stableBorrowRate: normalize(reserve.stableBorrowRate, RAY_DECIMALS),\n      liquidityRate: normalize(reserve.liquidityRate, RAY_DECIMALS),\n      liquidityIndex: normalize(reserve.liquidityIndex, RAY_DECIMALS),\n      reserveLiquidationThreshold: normalize(\n        reserve.reserveLiquidationThreshold,\n        4\n      ),\n      reserveLiquidationBonus: normalize(\n        valueToBigNumber(reserve.reserveLiquidationBonus).minus(\n          10 ** LTV_PRECISION\n        ),\n        4\n      ),\n      totalScaledVariableDebt: normalize(\n        reserve.totalScaledVariableDebt,\n        reserve.decimals\n      ),\n      totalPrincipalStableDebt: normalize(\n        reserve.totalPrincipalStableDebt,\n        reserve.decimals\n      ),\n      variableBorrowIndex: normalize(reserve.variableBorrowIndex, RAY_DECIMALS),\n    };\n  });\n}\n","import { providers, BigNumber, BytesLike, PopulatedTransaction } from 'ethers';\n\nexport type tEthereumAddress = string;\nexport type tStringCurrencyUnits = string; // ex 2.5 eth\nexport type tStringDecimalUnits = string; // ex 2500000000000000000\nexport type ENS = string; // something.eth\n\n/** InterestRate options */\nexport enum InterestRate {\n  None = 'None',\n  Stable = 'Stable',\n  Variable = 'Variable',\n}\n\nexport enum Market {\n  Proto = 'proto',\n  // Uniswap = 'uniswap',\n}\n\nexport enum Network {\n  mainnet = 'mainnet',\n  ropsten = 'ropsten',\n  kovan = 'kovan',\n}\n\nexport enum ChainId {\n  mainnet = 1,\n  ropsten = 3,\n  kovan = 42,\n}\n\nexport enum eEthereumTxType {\n  ERC20_APPROVAL = 'ERC20_APPROVAL',\n  DLP_ACTION = 'DLP_ACTION',\n  GOVERNANCE_ACTION = 'GOVERNANCE_ACTION',\n  GOV_DELEGATION_ACTION = 'GOV_DELEGATION_ACTION',\n  STAKE_ACTION = 'STAKE_ACTION',\n  MIGRATION_LEND_AAVE = 'MIGRATION_LEND_AAVE',\n  FAUCET_MINT = 'FAUCET_MINT',\n}\n\nexport enum ProtocolAction {\n  default = 'default',\n  withdraw = 'withdraw',\n  deposit = 'deposit',\n  liquidationCall = 'liquidationCall',\n  liquidationFlash = 'liquidationFlash',\n  repay = 'repay',\n  swapCollateral = 'swapCollateral',\n  repayCollateral = 'repayCollateral',\n  withdrawETH = 'withdrawETH',\n  borrowETH = 'borrwoETH',\n}\n\nexport enum GovernanceVote {\n  Abstain = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum Stake {\n  Aave = 'Aave',\n  Balancer = 'Balancer',\n}\n\nexport type GasRecommendationType = {\n  [action: string]: {\n    limit: string;\n    recommended: string;\n  };\n};\n\nexport type GeneratedTx = {\n  tx: transactionType;\n  gas: {\n    price: string;\n    limit: string;\n  };\n};\n\nexport type transactionType = {\n  value?: string;\n  from?: string;\n  to?: string;\n  nonce?: number;\n  gasLimit?: BigNumber;\n  gasPrice?: BigNumber;\n  data?: string;\n  chainId?: number;\n};\n\nexport type AddressModel = {\n  ADDRESS_PROVIDER_ADDRESS: tEthereumAddress;\n  LENDINGPOOL_ADDRESS: tEthereumAddress;\n  LENDINGPOOL_CORE_ADDRESS: tEthereumAddress;\n  SYNTHETIX_PROXY_ADDRESS: tEthereumAddress;\n  GOVERNANCE_PROTO_CONTRACT: tEthereumAddress;\n  LEND_TO_AAVE_MIGRATOR: tEthereumAddress;\n  WETH_GATEWAY: tEthereumAddress;\n  FAUCET: tEthereumAddress;\n  SWAP_COLLATERAL_ADAPTER: tEthereumAddress;\n  REPAY_WITH_COLLATERAL_ADAPTER: tEthereumAddress;\n  AAVE_GOVERNANCE_V2: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_EXECUTOR_LONG: tEthereumAddress;\n  AAVE_GOVERNANCE_V2_HELPER: tEthereumAddress;\n  FLASHLIQUIDATION: tEthereumAddress;\n};\n\nexport type tCommonContractAddressBetweenMarkets = Pick<\n  AddressModel,\n  | 'SYNTHETIX_PROXY_ADDRESS'\n  | 'GOVERNANCE_PROTO_CONTRACT'\n  | 'LEND_TO_AAVE_MIGRATOR'\n  | 'WETH_GATEWAY'\n  | 'FAUCET'\n  | 'SWAP_COLLATERAL_ADAPTER'\n  | 'REPAY_WITH_COLLATERAL_ADAPTER'\n  | 'FLASHLIQUIDATION'\n>;\n\nexport type tDistinctContractAddressBetweenMarkets = Pick<\n  AddressModel,\n  | 'ADDRESS_PROVIDER_ADDRESS'\n  | 'LENDINGPOOL_ADDRESS'\n  | 'LENDINGPOOL_CORE_ADDRESS'\n>;\n\nexport type tDistinctContractAddressBetweenMarketsV2 = Pick<\n  AddressModel,\n  'LENDINGPOOL_ADDRESS'\n>;\n\nexport type tDistinctGovernanceV2Addresses = Pick<\n  AddressModel,\n  | 'AAVE_GOVERNANCE_V2'\n  | 'AAVE_GOVERNANCE_V2_EXECUTOR_SHORT'\n  | 'AAVE_GOVERNANCE_V2_EXECUTOR_LONG'\n  | 'AAVE_GOVERNANCE_V2_HELPER'\n>;\n\nexport type tdistinctStakingAddressesBetweenTokens = {\n  TOKEN_STAKING_ADDRESS: tEthereumAddress;\n  STAKING_HELPER_ADDRESS: tEthereumAddress;\n  canUsePermit: boolean;\n};\n\nexport type ContractAddresses = {\n  [contractName: string]: tEthereumAddress;\n};\n\nexport type Configuration = {\n  network: Network;\n  provider:\n    | providers.JsonRpcProvider\n    | providers.BaseProvider\n    | providers.Web3Provider;\n};\n\nexport type EthereumTransactionTypeExtended = {\n  txType: eEthereumTxType;\n  tx: () => Promise<transactionType>;\n  gas?: GasResponse;\n};\n\nexport type TransactionGenerationMethod = {\n  rawTxMethod: () => Promise<PopulatedTransaction>;\n  from: tEthereumAddress;\n  value?: string;\n  gasSurplus?: number;\n  action?: ProtocolAction;\n};\n\nexport type TransactionGasGenerationMethod = {\n  txCallback: () => Promise<transactionType>;\n  action?: ProtocolAction;\n};\n\nexport type GasType = {\n  gasLimit: string | undefined;\n  gasPrice: string;\n};\nexport type GasResponse = () => Promise<GasType | null>;\n\nexport type TokenMetadataType = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n};\n\nexport type DefaultProviderKeys = {\n  etherscan?: string;\n  infura?: string;\n  alchemy?: string;\n};\n\nexport type GovernanceConfigType = {\n  [network: string]: tDistinctGovernanceV2Addresses;\n};\nexport type StakingConfigType = {\n  [sToken: string]: {\n    [network: string]: tdistinctStakingAddressesBetweenTokens;\n  };\n};\n\nexport type CommonConfigType = {\n  [network: string]: tCommonContractAddressBetweenMarkets;\n};\n\nexport type LendingPoolConfigType = {\n  [pool: string]: {\n    [network: string]: tDistinctContractAddressBetweenMarketsV2;\n  };\n};\n\nexport type EnabledNetworksType = {\n  staking: {\n    [sToken: string]: Network[];\n  };\n  lendingPool: {\n    [market: string]: Network[];\n  };\n  governance: Network[];\n  wethGateway: Network[];\n  faucet: Network[];\n  liquiditySwapAdapter: Network[];\n  repayWithCollateralAdapter: Network[];\n  aaveGovernanceV2: Network[];\n};\n\nexport type PermitSignature = {\n  amount: tStringCurrencyUnits;\n  deadline: string;\n  v: number;\n  r: BytesLike;\n  s: BytesLike;\n};\n\nexport type FlashLoanParams = {\n  assetToSwapToList: tEthereumAddress[]; // List of the addresses of the reserve to be swapped to and deposited\n  minAmountsToReceive: string[]; // List of min amounts to be received from the swap\n  swapAllBalance: boolean[]; // Flag indicating if all the user balance should be swapped\n  permitAmount: string[]; // List of amounts for the permit signature\n  deadline: string[]; // List of deadlines for the permit signature\n  v: number[]; // List of v param for the permit signature\n  r: BytesLike[]; // List of r param for the permit signature\n  s: BytesLike[]; // List of s param for the permit signature\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  CommonConfigType,\n  GovernanceConfigType,\n  LendingPoolConfigType,\n  Market,\n  Network,\n} from '../../types';\n\nexport const commonContractAddressBetweenMarketsV2: CommonConfigType = {\n  [Network.kovan]: {\n    SYNTHETIX_PROXY_ADDRESS: '',\n    GOVERNANCE_PROTO_CONTRACT: '0x8134929c3dcb1b8b82f27f53424b959fb82182f2',\n    LEND_TO_AAVE_MIGRATOR: '0x8cC8965FEf45a448bdbe3C749683b280eF2E17Ea',\n    WETH_GATEWAY: '0xf8aC10E65F2073460aAD5f28E1EABE807DC287CF',\n    FAUCET: '0x600103d518cC5E8f3319D532eB4e5C268D32e604',\n    SWAP_COLLATERAL_ADAPTER: '0xC18451d36aA370fDACe8d45839bF975F48f7AEa1',\n    REPAY_WITH_COLLATERAL_ADAPTER: '0xf86Be05f535EC2d217E4c6116B3fa147ee5C05A1',\n    FLASHLIQUIDATION: '0x9D50F0b23b1805773f607F0B4678d724322B7AC2',\n  },\n  [Network.ropsten]: {\n    SYNTHETIX_PROXY_ADDRESS: '',\n    GOVERNANCE_PROTO_CONTRACT: '',\n    LEND_TO_AAVE_MIGRATOR: '',\n    WETH_GATEWAY: '',\n    FAUCET: '0xcCB8f5183065AF6C40d3A13ae669FB8F92A11C05',\n    SWAP_COLLATERAL_ADAPTER: '',\n    REPAY_WITH_COLLATERAL_ADAPTER: '',\n    FLASHLIQUIDATION: '',\n  },\n  [Network.mainnet]: {\n    SYNTHETIX_PROXY_ADDRESS: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',\n    GOVERNANCE_PROTO_CONTRACT: '0x8a2efd9a790199f4c94c6effe210fce0b4724f52',\n    LEND_TO_AAVE_MIGRATOR: '0x317625234562b1526ea2fac4030ea499c5291de4',\n    WETH_GATEWAY: '0xDcD33426BA191383f1c9B431A342498fdac73488',\n    FAUCET: '',\n    SWAP_COLLATERAL_ADAPTER: '0x63a3f444e97d14e671e7ee323c4234c8095e3516',\n    REPAY_WITH_COLLATERAL_ADAPTER: '0x498c5431eb517101582988fbb36431ddaac8f4b1',\n    FLASHLIQUIDATION: '',\n  },\n};\n\nexport const distinctContractAddressBetweenMarketsV2: LendingPoolConfigType = {\n  [Market.Proto]: {\n    [Network.kovan]: {\n      LENDINGPOOL_ADDRESS: '0xE0fBa4Fc209b4948668006B2bE61711b7f465bAe',\n    },\n    [Network.ropsten]: {\n      LENDINGPOOL_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      LENDINGPOOL_ADDRESS: '0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9',\n    },\n  },\n};\n\nexport const aaveGovernanceV2Addresses: GovernanceConfigType = {\n  [Network.kovan]: {\n    AAVE_GOVERNANCE_V2: '0xc2eBaB3Bac8f2f5028f5C7317027A41EBFCa31D2',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT:\n      '0x462eD5dc919BE6C96639D5f31ab919EBA8F31831', // executor for testing\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG:\n      '0x7e5195b0A6a60b371Ba3276032CF6958eADFA652',\n    AAVE_GOVERNANCE_V2_HELPER: '0xffd5BEb5712952FC9a9DDC7499487422B29Fdda6',\n  },\n  [Network.ropsten]: {\n    AAVE_GOVERNANCE_V2: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT: '',\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG: '',\n    AAVE_GOVERNANCE_V2_HELPER: '',\n  },\n  [Network.mainnet]: {\n    AAVE_GOVERNANCE_V2: '0xEC568fffba86c094cf06b22134B23074DFE2252c',\n    AAVE_GOVERNANCE_V2_EXECUTOR_SHORT:\n      '0x61910EcD7e8e942136CE7Fe7943f956cea1CC2f7',\n    AAVE_GOVERNANCE_V2_EXECUTOR_LONG:\n      '0xEE56e2B3D491590B5b31738cC34d5232F378a8D5',\n    AAVE_GOVERNANCE_V2_HELPER: '0x16ff7583ea21055bf5f929ec4b896d997ff35847',\n  },\n};\n","import { BigNumber, constants } from 'ethers';\nimport {\n  EnabledNetworksType,\n  GasRecommendationType,\n  Market,\n  Network,\n  ProtocolAction,\n  Stake,\n  StakingConfigType,\n} from '../types';\n\nexport const DEFAULT_NULL_VALUE_ON_TX = BigNumber.from(0).toHexString();\nexport const DEFAULT_APPROVE_AMOUNT = constants.MaxUint256.toString();\nexport const MAX_UINT_AMOUNT =\n  '115792089237316195423570985008687907853269984665640564039457584007913129639935';\nexport const SUPER_BIG_ALLOWANCE_NUMBER =\n  '11579208923731619542357098500868790785326998466564056403945758400791';\nexport const API_ETH_MOCK_ADDRESS =\n  '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\nexport const uniswapEthAmount = '0.1';\nexport const SURPLUS = '0.05';\n\nexport const gasLimitRecommendations: GasRecommendationType = {\n  [ProtocolAction.default]: {\n    limit: '210000',\n    recommended: '210000',\n  },\n  [ProtocolAction.deposit]: {\n    limit: '300000',\n    recommended: '300000',\n  },\n  [ProtocolAction.withdraw]: {\n    limit: '230000',\n    recommended: '300000',\n  },\n  [ProtocolAction.liquidationCall]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n  [ProtocolAction.liquidationFlash]: {\n    limit: '995000',\n    recommended: '995000',\n  },\n  [ProtocolAction.repay]: {\n    limit: '300000',\n    recommended: '300000',\n  },\n  [ProtocolAction.borrowETH]: {\n    limit: '450000',\n    recommended: '450000',\n  },\n  [ProtocolAction.withdrawETH]: {\n    limit: '640000',\n    recommended: '640000',\n  },\n  [ProtocolAction.swapCollateral]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n  [ProtocolAction.repayCollateral]: {\n    limit: '700000',\n    recommended: '700000',\n  },\n};\n\nexport const distinctStakingAddressesBetweenTokens: StakingConfigType = {\n  [Stake.Aave]: {\n    [Network.kovan]: {\n      canUsePermit: true,\n      TOKEN_STAKING_ADDRESS: '0xf2fbf9A6710AfDa1c4AaB2E922DE9D69E0C97fd2',\n      STAKING_HELPER_ADDRESS: '0xf267aCc8BF1D8b41c89b6dc1a0aD8439dfbc890c',\n    },\n    [Network.ropsten]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      canUsePermit: true,\n      TOKEN_STAKING_ADDRESS: '0x4da27a545c0c5b758a6ba100e3a049001de870f5',\n      STAKING_HELPER_ADDRESS: '0xce0424653fb2fd48ed1b621bdbd60db16b2e388a',\n    },\n  },\n  [Stake.Balancer]: {\n    [Network.kovan]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '0x31ce45Ab6E26C72c47C52c27498D460099545ef2',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.ropsten]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '',\n      STAKING_HELPER_ADDRESS: '',\n    },\n    [Network.mainnet]: {\n      canUsePermit: false,\n      TOKEN_STAKING_ADDRESS: '0xa1116930326D21fB917d5A27F1E9943A9595fb47',\n      STAKING_HELPER_ADDRESS: '',\n    },\n  },\n};\n\nexport const enabledNetworksByService: EnabledNetworksType = {\n  staking: {\n    [Stake.Balancer]: [Network.kovan, Network.mainnet],\n    [Stake.Aave]: [Network.kovan, Network.mainnet],\n  },\n  lendingPool: {\n    [Market.Proto]: [Network.kovan, Network.mainnet],\n  },\n  governance: [Network.kovan, Network.mainnet],\n  wethGateway: [Network.kovan, Network.mainnet],\n  faucet: [Network.kovan],\n  liquiditySwapAdapter: [Network.kovan, Network.mainnet],\n  repayWithCollateralAdapter: [Network.kovan, Network.mainnet],\n  aaveGovernanceV2: [Network.kovan, Network.mainnet],\n};\n\nexport * from './v2/addresses';\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveGovernanceV2 } from \"../IAaveGovernanceV2\";\n\nexport class IAaveGovernanceV2__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveGovernanceV2 {\n    return new Contract(address, _abi, signerOrProvider) as IAaveGovernanceV2;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"ExecutorAuthorized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"ExecutorUnauthorized\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"newStrategy\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorChange\",\n        type: \"address\",\n      },\n    ],\n    name: \"GovernanceStrategyChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ProposalCanceled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"creator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"contract IExecutorWithTimelock\",\n        name: \"executor\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address[]\",\n        name: \"targets\",\n        type: \"address[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256[]\",\n        name: \"values\",\n        type: \"uint256[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"string[]\",\n        name: \"signatures\",\n        type: \"string[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes[]\",\n        name: \"calldatas\",\n        type: \"bytes[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool[]\",\n        name: \"withDelegatecalls\",\n        type: \"bool[]\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"startBlock\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"endBlock\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"strategy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"ipfsHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"ProposalCreated\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorExecution\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProposalExecuted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"executionTime\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorQueueing\",\n        type: \"address\",\n      },\n    ],\n    name: \"ProposalQueued\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"voter\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"votingPower\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"VoteEmitted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"newVotingDelay\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"initiatorChange\",\n        type: \"address\",\n      },\n    ],\n    name: \"VotingDelayChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"__abdicate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"executors\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"authorizeExecutors\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"cancel\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IExecutorWithTimelock\",\n        name: \"executor\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"targets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"values\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"string[]\",\n        name: \"signatures\",\n        type: \"string[]\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"calldatas\",\n        type: \"bytes[]\",\n      },\n      {\n        internalType: \"bool[]\",\n        name: \"withDelegatecalls\",\n        type: \"bool[]\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"ipfsHash\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"create\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGovernanceStrategy\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGuardian\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProposalById\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IAaveGovernanceV2.ProposalWithoutVotes\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getProposalState\",\n    outputs: [\n      {\n        internalType: \"enum IAaveGovernanceV2.ProposalState\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getProposalsCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"voter\",\n        type: \"address\",\n      },\n    ],\n    name: \"getVoteOnProposal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"support\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"uint248\",\n            name: \"votingPower\",\n            type: \"uint248\",\n          },\n        ],\n        internalType: \"struct IAaveGovernanceV2.Vote\",\n        name: \"\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getVotingDelay\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"executor\",\n        type: \"address\",\n      },\n    ],\n    name: \"isExecutorAuthorized\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"queue\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"governanceStrategy\",\n        type: \"address\",\n      },\n    ],\n    name: \"setGovernanceStrategy\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"votingDelay\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setVotingDelay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n    ],\n    name: \"submitVote\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"proposalId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"support\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"submitVoteBySignature\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"executors\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"unauthorizeExecutors\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IAaveStakingHelper } from \"../IAaveStakingHelper\";\n\nexport class IAaveStakingHelper__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IAaveStakingHelper {\n    return new Contract(address, _abi, signerOrProvider) as IAaveStakingHelper;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IDebtTokenBase } from \"../IDebtTokenBase\";\n\nexport class IDebtTokenBase__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IDebtTokenBase {\n    return new Contract(address, _abi, signerOrProvider) as IDebtTokenBase;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approveDelegation\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"fromUser\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"toUser\",\n        type: \"address\",\n      },\n    ],\n    name: \"borrowAllowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IERC20Detailed } from \"../IERC20Detailed\";\n\nexport class IERC20Detailed__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IERC20Detailed {\n    return new Contract(address, _abi, signerOrProvider) as IERC20Detailed;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IFaucet } from \"../IFaucet\";\n\nexport class IFaucet__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IFaucet {\n    return new Contract(address, _abi, signerOrProvider) as IFaucet;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n    ],\n    name: \"getMinter\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernancePowerDelegationToken } from \"../IGovernancePowerDelegationToken\";\n\nexport class IGovernancePowerDelegationToken__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernancePowerDelegationToken {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IGovernancePowerDelegationToken;\n  }\n}\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"delegator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"DelegateChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"DelegatedPowerChanged\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"_nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n    ],\n    name: \"delegate\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"delegateBySig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"delegateByType\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegatee\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"delegateByTypeBySig\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"delegator\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getDelegateeByType\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPowerAtBlock\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"enum IGovernancePowerDelegationToken.DelegationType\",\n        name: \"delegationType\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"getPowerCurrent\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"totalSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernanceStrategy } from \"../IGovernanceStrategy\";\n\nexport class IGovernanceStrategy__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernanceStrategy {\n    return new Contract(address, _abi, signerOrProvider) as IGovernanceStrategy;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"AAVE\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"STK_AAVE\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getPropositionPowerAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalPropositionSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTotalVotingSupplyAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getVotingPowerAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IGovernanceV2Helper } from \"../IGovernanceV2Helper\";\n\nexport class IGovernanceV2Helper__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IGovernanceV2Helper {\n    return new Contract(address, _abi, signerOrProvider) as IGovernanceV2Helper;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IAaveGovernanceV2\",\n        name: \"governance\",\n        type: \"address\",\n      },\n    ],\n    name: \"getProposal\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"totalVotingSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumQuorum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumDiff\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTimeWithGracePeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalCreated\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IAaveGovernanceV2.ProposalState\",\n            name: \"proposalState\",\n            type: \"uint8\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.ProposalStats\",\n        name: \"proposalStats\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"skip\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IAaveGovernanceV2\",\n        name: \"governance\",\n        type: \"address\",\n      },\n    ],\n    name: \"getProposals\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"totalVotingSupply\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumQuorum\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minimumDiff\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTimeWithGracePeriod\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"proposalCreated\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"id\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"creator\",\n            type: \"address\",\n          },\n          {\n            internalType: \"contract IExecutorWithTimelock\",\n            name: \"executor\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address[]\",\n            name: \"targets\",\n            type: \"address[]\",\n          },\n          {\n            internalType: \"uint256[]\",\n            name: \"values\",\n            type: \"uint256[]\",\n          },\n          {\n            internalType: \"string[]\",\n            name: \"signatures\",\n            type: \"string[]\",\n          },\n          {\n            internalType: \"bytes[]\",\n            name: \"calldatas\",\n            type: \"bytes[]\",\n          },\n          {\n            internalType: \"bool[]\",\n            name: \"withDelegatecalls\",\n            type: \"bool[]\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"startBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"endBlock\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"executionTime\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"forVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"againstVotes\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"executed\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"canceled\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"address\",\n            name: \"strategy\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"ipfsHash\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"enum IAaveGovernanceV2.ProposalState\",\n            name: \"proposalState\",\n            type: \"uint8\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.ProposalStats[]\",\n        name: \"proposalsStats\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"tokens\",\n        type: \"address[]\",\n      },\n    ],\n    name: \"getTokensPower\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"votingPower\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"delegatedAddressVotingPower\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"propositionPower\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"delegatedAddressPropositionPower\",\n            type: \"address\",\n          },\n        ],\n        internalType: \"struct IGovernanceV2Helper.Power[]\",\n        name: \"power\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ILendingPool } from \"../ILendingPool\";\n\nexport class ILendingPool__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ILendingPool {\n    return new Contract(address, _abi, signerOrProvider) as ILendingPool;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"FLASHLOAN_PREMIUM_TOTAL\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interestRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"borrow\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"receiver\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"assets\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"modes\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"flashLoan\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"collateral\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"purchaseAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"receiveAToken\",\n        type: \"bool\",\n      },\n    ],\n    name: \"liquidationCall\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"useAsCollateral\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setUserUseReserveAsCollateral\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapBorrowRateMode\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"reserve\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ILendToAaveMigrator } from \"../ILendToAaveMigrator\";\n\nexport class ILendToAaveMigrator__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ILendToAaveMigrator {\n    return new Contract(address, _abi, signerOrProvider) as ILendToAaveMigrator;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"LEND\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"migrateFromLEND\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IMinter } from \"../IMinter\";\n\nexport class IMinter__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IMinter {\n    return new Contract(address, _abi, signerOrProvider) as IMinter;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"isEthRequired\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IRepayWithCollateral } from \"../IRepayWithCollateral\";\n\nexport class IRepayWithCollateral__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IRepayWithCollateral {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as IRepayWithCollateral;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"collateralAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"debtAsset\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"collateralAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"debtRepayAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"debtRateMode\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct IRepayWithCollateral.PermitSignature\",\n        name: \"permitSignature\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"useEthPath\",\n        type: \"bool\",\n      },\n    ],\n    name: \"swapAndRepay\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IStakedToken } from \"../IStakedToken\";\n\nexport class IStakedToken__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IStakedToken {\n    return new Contract(address, _abi, signerOrProvider) as IStakedToken;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [],\n    name: \"REWARD_TOKEN\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"STAKED_TOKEN\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"claimRewards\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"cooldown\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"stake\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ISwapCollateral } from \"../ISwapCollateral\";\n\nexport class ISwapCollateral__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ISwapCollateral {\n    return new Contract(address, _abi, signerOrProvider) as ISwapCollateral;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"assetToSwapFromList\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"assetToSwapToList\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amountToSwapList\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"minAmountsToReceive\",\n        type: \"uint256[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"amount\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct ISwapCollateral.PermitSignature[]\",\n        name: \"permitParams\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bool[]\",\n        name: \"useEthPath\",\n        type: \"bool[]\",\n      },\n    ],\n    name: \"swapAndDeposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { ISynthetix } from \"../ISynthetix\";\n\nexport class ISynthetix__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): ISynthetix {\n    return new Contract(address, _abi, signerOrProvider) as ISynthetix;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"transferableSynthetix\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"transferable\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\n\nimport type { IWETHGateway } from \"../IWETHGateway\";\n\nexport class IWETHGateway__factory {\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): IWETHGateway {\n    return new Contract(address, _abi, signerOrProvider) as IWETHGateway;\n  }\n}\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"interesRateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"borrowETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint16\",\n        name: \"referralCode\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"rateMode\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"repayETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"onBehalfOf\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n","import BigNumber from 'bignumber.js';\nimport {\n  API_ETH_MOCK_ADDRESS,\n  DEFAULT_NULL_VALUE_ON_TX,\n  uniswapEthAmount,\n} from '../config';\nimport { tStringDecimalUnits } from '../types';\n\nexport const parseNumber = (value: string, decimals: number): string => {\n  return new BigNumber(value)\n    .multipliedBy(new BigNumber(10).pow(decimals))\n    .toFixed(0);\n};\n\nexport const decimalsToCurrencyUnits = (\n  value: string,\n  decimals: number\n): string =>\n  new BigNumber(value).div(new BigNumber(10).pow(decimals)).toFixed();\n\nexport const getTxValue = (reserve: string, amount: string): string => {\n  return reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()\n    ? amount\n    : DEFAULT_NULL_VALUE_ON_TX;\n};\n\nexport const mintAmountsPerToken: { [token: string]: tStringDecimalUnits } = {\n  AAVE: parseNumber('100', 18),\n  BAT: parseNumber('100000', 18),\n  BUSD: parseNumber('10000', 18),\n  DAI: parseNumber('10000', 18),\n  ENJ: parseNumber('100000', 18),\n  KNC: parseNumber('10000', 18),\n  LEND: parseNumber('1000', 18), // Not available on v2, but to support v1 faucet\n  LINK: parseNumber('1000', 18),\n  MANA: parseNumber('100000', 18),\n  MKR: parseNumber('10', 18),\n  REN: parseNumber('10000', 18),\n  REP: parseNumber('1000', 18),\n  SNX: parseNumber('100', 18),\n  SUSD: parseNumber('10000', 18),\n  TUSD: '0', // The TusdMinter contract already mints the maximum\n  UNI: parseNumber('1000', 18),\n  USDC: parseNumber('10000', 6),\n  USDT: parseNumber('10000', 6),\n  WBTC: parseNumber('1', 8),\n  YFI: parseNumber('1', 18),\n  ZRX: parseNumber('100000', 18),\n  UNIUSDC: parseNumber(uniswapEthAmount, 6),\n  UNIDAI: parseNumber(uniswapEthAmount, 18),\n  UNIUSDT: parseNumber(uniswapEthAmount, 6),\n  UNIDAIETH: parseNumber(uniswapEthAmount, 18),\n  UNIUSDCETH: parseNumber(uniswapEthAmount, 18),\n  UNISETHETH: parseNumber(uniswapEthAmount, 18),\n  UNILENDETH: parseNumber(uniswapEthAmount, 18),\n  UNILINKETH: parseNumber(uniswapEthAmount, 18),\n  UNIMKRETH: parseNumber(uniswapEthAmount, 18),\n};\n\nexport const canBeEnsAddress = (ensAddress: string): boolean => {\n  return ensAddress.toLowerCase().endsWith('.eth');\n};\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport 'reflect-metadata';\n\nexport const isEthAddressMetadataKey = Symbol('ethAddress');\nexport const isEthAddressOrENSMetadataKey = Symbol('ethOrENSAddress');\nexport const isPositiveMetadataKey = Symbol('isPositive');\nexport const isPositiveOrMinusOneMetadataKey = Symbol('isPositiveOrMinusOne');\nexport const is0OrPositiveMetadataKey = Symbol('is0OrPositiveMetadataKey');\nexport const optionalMetadataKey = Symbol('Optional');\n\nexport type paramsType = {\n  index: number;\n  field: string | undefined;\n};\n\n// tslint:disable-next-line: function-name\nexport function IsEthAddress(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(isEthAddressMetadataKey, target, propertyKey) ||\n      [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsEthAddressOrENS(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const existingPossibleAddresses: paramsType[] =\n      Reflect.getOwnMetadata(\n        isEthAddressOrENSMetadataKey,\n        target,\n        propertyKey\n      ) || [];\n\n    existingPossibleAddresses.push({\n      index: parameterIndex,\n      field,\n    });\n\n    Reflect.defineMetadata(\n      isEthAddressOrENSMetadataKey,\n      existingPossibleAddresses,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsPositiveAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(isPositiveMetadataKey, target, propertyKey) || [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(isPositiveMetadataKey, params, target, propertyKey);\n  };\n}\n\nexport function Is0OrPositiveAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(is0OrPositiveMetadataKey, target, propertyKey) ||\n      [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(\n      is0OrPositiveMetadataKey,\n      params,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function IsPositiveOrMinusOneAmount(field?: string) {\n  return function (\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    target: any,\n    propertyKey: string | symbol,\n    parameterIndex: number\n  ): void {\n    const params: paramsType[] =\n      Reflect.getOwnMetadata(\n        isPositiveOrMinusOneMetadataKey,\n        target,\n        propertyKey\n      ) || [];\n\n    params.push({ index: parameterIndex, field });\n\n    Reflect.defineMetadata(\n      isPositiveOrMinusOneMetadataKey,\n      params,\n      target,\n      propertyKey\n    );\n  };\n}\n\nexport function Optional(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyKey: string | symbol,\n  parameterIndex: number\n): void {\n  const existingOptionalParameters =\n    Reflect.getOwnMetadata(optionalMetadataKey, target, propertyKey) || [];\n  existingOptionalParameters.push(parameterIndex);\n  Reflect.defineMetadata(\n    optionalMetadataKey,\n    existingOptionalParameters,\n    target,\n    propertyKey\n  );\n}\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { utils } from 'ethers';\nimport { canBeEnsAddress } from '../utils/parsings';\n// import 'reflect-metadata';\nimport {\n  is0OrPositiveMetadataKey,\n  isEthAddressMetadataKey,\n  isEthAddressOrENSMetadataKey,\n  isPositiveMetadataKey,\n  isPositiveOrMinusOneMetadataKey,\n  optionalMetadataKey,\n  paramsType,\n} from './paramValidators';\n\nexport function optionalValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any\n): boolean[] {\n  const optionalParameters = Reflect.getOwnMetadata(\n    optionalMetadataKey,\n    target,\n    propertyName\n  );\n\n  const isParamOptional: boolean[] = [];\n  if (optionalParameters) {\n    optionalParameters.forEach((parameterIndex: number) => {\n      if (methodArguments[parameterIndex] == null) {\n        isParamOptional[parameterIndex] = true;\n      }\n    });\n  }\n  return isParamOptional;\n}\n\nexport function isEthAddressValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          throw new Error(\n            `Address: ${\n              methodArguments[0][storedParams.field]\n            } is not a valid ethereum Address`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional &&\n          !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          throw new Error(\n            `Address: ${\n              methodArguments[storedParams.index]\n            } is not a valid ethereum Address`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function isEthAddressOrEnsValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const addressParameters: paramsType[] = Reflect.getOwnMetadata(\n    isEthAddressOrENSMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (addressParameters) {\n    addressParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !utils.isAddress(methodArguments[0][storedParams.field])\n        ) {\n          if (!canBeEnsAddress(methodArguments[0][storedParams.field])) {\n            throw new Error(\n              `Address ${\n                methodArguments[0][storedParams.field]\n              } is not valid ENS format or a valid ethereum Address`\n            );\n          }\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          methodArguments[storedParams.index] &&\n          !isOptional &&\n          !utils.isAddress(methodArguments[storedParams.index])\n        ) {\n          if (!canBeEnsAddress(methodArguments[storedParams.index])) {\n            throw new Error(\n              `Address ${\n                methodArguments[storedParams.index]\n              } is not valid ENS format or a valid ethereum Address`\n            );\n          }\n        }\n      }\n    });\n  }\n}\n\nexport function amountGtThan0Validator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountParameters: paramsType[] = Reflect.getOwnMetadata(\n    isPositiveMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountParameters) {\n    amountParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(Number(methodArguments[0][storedParams.field]) > 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (!isOptional && !(Number(methodArguments[storedParams.index]) > 0)) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function amount0OrPositiveValidator(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountParameters: paramsType[] = Reflect.getOwnMetadata(\n    is0OrPositiveMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountParameters) {\n    amountParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(Number(methodArguments[0][storedParams.field]) >= 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          !isOptional &&\n          !(Number(methodArguments[storedParams.index]) >= 0)\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0`\n          );\n        }\n      }\n    });\n  }\n}\n\nexport function amountGtThan0OrMinus1(\n  target: any,\n  propertyName: string,\n  methodArguments: any,\n  isParamOptional?: boolean[]\n): void {\n  const amountMinusOneParameters: paramsType[] = Reflect.getOwnMetadata(\n    isPositiveOrMinusOneMetadataKey,\n    target,\n    propertyName\n  );\n\n  if (amountMinusOneParameters) {\n    amountMinusOneParameters.forEach((storedParams) => {\n      if (storedParams.field) {\n        if (\n          methodArguments[0][storedParams.field] &&\n          !(\n            Number(methodArguments[0][storedParams.field]) > 0 ||\n            methodArguments[0][storedParams.field] === '-1'\n          )\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[0][storedParams.field]\n            } needs to be greater than 0 or -1`\n          );\n        }\n      } else {\n        const isOptional =\n          isParamOptional && isParamOptional[storedParams.index];\n        if (\n          !isOptional &&\n          !(\n            Number(methodArguments[storedParams.index]) > 0 ||\n            methodArguments[storedParams.index] === '-1'\n          )\n        ) {\n          throw new Error(\n            `Amount: ${\n              methodArguments[storedParams.index]\n            } needs to be greater than 0 or -1`\n          );\n        }\n      }\n    });\n  }\n}\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Network } from '../types';\nimport {\n  amount0OrPositiveValidator,\n  amountGtThan0OrMinus1,\n  amountGtThan0Validator,\n  isEthAddressOrEnsValidator,\n  isEthAddressValidator,\n  optionalValidator,\n} from './validations';\nimport { enabledNetworksByService } from '../config';\n\nexport function LPValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.lendingPool[this.market];\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function LiquiditySwapValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.liquiditySwapAdapter;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function RepayWithCollateralValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.repayWithCollateralAdapter;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function StakingValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.staking[this.tokenStake];\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function FaucetValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] = enabledNetworksByService.faucet;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    const isParamOptional = optionalValidator(target, propertyName, arguments);\n\n    isEthAddressValidator(target, propertyName, arguments, isParamOptional);\n\n    amountGtThan0Validator(target, propertyName, arguments, isParamOptional);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function WETHValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] = enabledNetworksByService.wethGateway;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amountGtThan0Validator(target, propertyName, arguments);\n\n    amountGtThan0OrMinus1(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function GovValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.aaveGovernanceV2;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n\n    amount0OrPositiveValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n\nexport function GovDelegationValidator(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  target: any,\n  propertyName: string,\n  descriptor: TypedPropertyDescriptor<any>\n): any {\n  const method = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function () {\n    const currentNetwork = this.config.network;\n    const acceptedNetworks: Network[] =\n      enabledNetworksByService.aaveGovernanceV2;\n    if (acceptedNetworks.indexOf(currentNetwork) === -1) {\n      return [];\n    }\n\n    isEthAddressValidator(target, propertyName, arguments);\n    isEthAddressOrEnsValidator(target, propertyName, arguments);\n    amountGtThan0Validator(target, propertyName, arguments);\n    amount0OrPositiveValidator(target, propertyName, arguments);\n\n    return method?.apply(this, arguments);\n  };\n}\n","import { BigNumber } from 'ethers';\nimport { transactionType, Configuration } from '../types';\n\nconst DEFAULT_SURPLUS = 15; // 15%\n\nexport const estimateGas = async (\n  tx: transactionType,\n  config: Configuration,\n  gasSurplus?: number\n): Promise<BigNumber> => {\n  const estimatedGas = await config.provider.estimateGas(tx);\n  return estimatedGas.add(\n    estimatedGas.mul(gasSurplus || DEFAULT_SURPLUS).div(100)\n  );\n};\n\nexport const getGasPrice = async (\n  config: Configuration\n): Promise<BigNumber> => {\n  const gasPrice = await config.provider.getGasPrice();\n  return gasPrice;\n};\n","import { BigNumber, Contract, PopulatedTransaction } from 'ethers';\nimport {\n  Configuration,\n  tEthereumAddress,\n  TransactionGenerationMethod,\n  transactionType,\n  GasResponse,\n  ProtocolAction,\n  EthereumTransactionTypeExtended,\n  eEthereumTxType,\n} from '../types';\nimport { ContractsFactory } from '../interfaces/ContractsFactory';\nimport { estimateGas, getGasPrice } from '../utils/gasStation';\nimport { DEFAULT_NULL_VALUE_ON_TX, gasLimitRecommendations } from '../config';\n\nexport default class BaseService<T extends Contract> {\n  readonly contractInstances: { [address: string]: T };\n\n  readonly contractFactory: ContractsFactory;\n\n  readonly config: Configuration;\n\n  constructor(config: Configuration, contractFactory: ContractsFactory) {\n    this.config = config;\n    this.contractFactory = contractFactory;\n    this.contractInstances = {};\n  }\n\n  public getContractInstance = (address: tEthereumAddress): T => {\n    if (!this.contractInstances[address]) {\n      const { provider }: Configuration = this.config;\n      this.contractInstances[address] = this.contractFactory.connect(\n        address,\n        provider\n      ) as T;\n    }\n\n    return this.contractInstances[address];\n  };\n\n  readonly generateTxCallback = ({\n    rawTxMethod,\n    from,\n    value,\n    gasSurplus,\n    action,\n  }: TransactionGenerationMethod): (() => Promise<transactionType>) => async () => {\n    const txRaw: PopulatedTransaction = await rawTxMethod();\n\n    const tx: transactionType = {\n      ...txRaw,\n      from,\n      value: value || DEFAULT_NULL_VALUE_ON_TX,\n    };\n\n    tx.gasLimit = await estimateGas(tx, this.config, gasSurplus);\n\n    if (\n      action &&\n      gasLimitRecommendations[action] &&\n      tx.gasLimit.lte(BigNumber.from(gasLimitRecommendations[action].limit))\n    ) {\n      tx.gasLimit = BigNumber.from(gasLimitRecommendations[action].recommended);\n    }\n\n    return tx;\n  };\n\n  readonly generateTxPriceEstimation = (\n    txs: EthereumTransactionTypeExtended[],\n    txCallback: () => Promise<transactionType>,\n    action: string = ProtocolAction.default\n  ): GasResponse => async () => {\n    try {\n      const gasPrice = await getGasPrice(this.config);\n      const hasPendingApprovals = txs.find(\n        (tx) => tx.txType === eEthereumTxType.ERC20_APPROVAL\n      );\n      if (!hasPendingApprovals) {\n        const {\n          gasLimit,\n          gasPrice: gasPriceProv,\n        }: transactionType = await txCallback();\n        if (!gasLimit) {\n          // If we don't recieve the correct gas we throw a error\n          throw new Error('Transaction calculation error');\n        }\n\n        return {\n          gasLimit: gasLimit.toString(),\n          gasPrice: gasPriceProv\n            ? gasPriceProv.toString()\n            : gasPrice.toString(),\n        };\n      }\n      return {\n        gasLimit: gasLimitRecommendations[action].recommended,\n        gasPrice: gasPrice.toString(),\n      };\n    } catch (error) {\n      console.error(\n        'Calculate error on calculate estimation gas price.',\n        error\n      );\n      return null;\n    }\n  };\n}\n","import { BigNumber, constants, utils } from 'ethers';\nimport {\n  API_ETH_MOCK_ADDRESS,\n  commonContractAddressBetweenMarketsV2,\n  DEFAULT_APPROVE_AMOUNT,\n  distinctContractAddressBetweenMarketsV2,\n  SURPLUS,\n} from '../../config';\nimport { ILendingPool, ILendingPool__factory } from '../../contract-types';\nimport IERC20ServiceInterface from '../../interfaces/ERC20';\nimport SynthetixInterface from '../../interfaces/Synthetix';\nimport LendingPoolInterface from '../../interfaces/v2/LendingPool';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  InterestRate,\n  Market,\n  ProtocolAction,\n  TokenMetadataType,\n  transactionType,\n  tStringDecimalUnits,\n} from '../../types';\nimport { getTxValue, parseNumber } from '../../utils/parsings';\nimport { LPValidator } from '../../validators/methodValidators';\nimport {\n  LPBorrowParamsType,\n  LPDepositParamsType,\n  LPLiquidationCall,\n  LPRepayParamsType,\n  LPRepayWithCollateral,\n  LPSetUsageAsCollateral,\n  LPSwapBorrowRateMode,\n  LPSwapCollateral,\n  LPWithdrawParamsType,\n  LPFlashLiquidation,\n} from '../../types/LendingPoolMethodTypes';\nimport WETHGatewayInterface from '../../interfaces/WETHGateway';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n} from '../../validators/paramValidators';\nimport LiquiditySwapAdapterInterface from '../../interfaces/LiquiditySwapAdapter';\nimport RepayWithCollateralAdapterInterface from '../../interfaces/RepayWithCollateralAdapter';\nimport BaseService from '../BaseService';\n\nexport default class LendingPool\n  extends BaseService<ILendingPool>\n  implements LendingPoolInterface {\n  readonly market: Market;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly lendingPoolAddress: string;\n\n  readonly synthetixService: SynthetixInterface;\n\n  readonly wethGatewayService: WETHGatewayInterface;\n\n  readonly liquiditySwapAdapterService: LiquiditySwapAdapterInterface;\n\n  readonly repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    synthetixService: SynthetixInterface,\n    wethGatewayService: WETHGatewayInterface,\n    liquiditySwapAdapterService: LiquiditySwapAdapterInterface,\n    repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface,\n    market: Market\n  ) {\n    super(config, ILendingPool__factory);\n    this.erc20Service = erc20Service;\n    this.synthetixService = synthetixService;\n    this.wethGatewayService = wethGatewayService;\n    this.liquiditySwapAdapterService = liquiditySwapAdapterService;\n    this.repayWithCollateralAdapterService = repayWithCollateralAdapterService;\n    this.market = market;\n\n    const { network } = this.config;\n    this.lendingPoolAddress =\n      distinctContractAddressBetweenMarketsV2[this.market][\n        network\n      ].LENDINGPOOL_ADDRESS;\n  }\n\n  @LPValidator\n  public async deposit(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    { user, reserve, amount, onBehalfOf, referralCode }: LPDepositParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return this.wethGatewayService.depositETH({\n        user,\n        amount,\n        onBehalfOf,\n        referralCode,\n      });\n    }\n    const {\n      isApproved,\n      approve,\n      decimalsOf,\n    }: IERC20ServiceInterface = this.erc20Service;\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const reserveDecimals: number = await decimalsOf(reserve);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      reserveDecimals\n    );\n\n    const fundsAvailable: boolean = await this.synthetixService.synthetixValidation(\n      user,\n      reserve,\n      convertedAmount\n    );\n    if (!fundsAvailable) {\n      throw new Error('Not enough funds to execute operation');\n    }\n\n    const approved = await isApproved(\n      reserve,\n      user,\n      this.lendingPoolAddress,\n      amount\n    );\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        reserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.deposit(\n          reserve,\n          convertedAmount,\n          onBehalfOf || user,\n          referralCode || '0'\n        ),\n      from: user,\n      value: getTxValue(reserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.deposit\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async withdraw(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    @IsEthAddress('aTokenAddress')\n    { user, reserve, amount, onBehalfOf, aTokenAddress }: LPWithdrawParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      if (!aTokenAddress) {\n        throw new Error(\n          'To withdraw ETH you need to pass the aWETH token address'\n        );\n      }\n\n      return this.wethGatewayService.withdrawETH({\n        user,\n        amount,\n        onBehalfOf,\n        aTokenAddress,\n      });\n    }\n    const { decimalsOf }: IERC20ServiceInterface = this.erc20Service;\n    const decimals: number = await decimalsOf(reserve);\n\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, decimals);\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.withdraw(\n          reserve,\n          convertedAmount,\n          onBehalfOf || user\n        ),\n      from: user,\n      action: ProtocolAction.withdraw,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          [],\n          txCallback,\n          ProtocolAction.withdraw\n        ),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async borrow(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('debtTokenAddress')\n    @IsEthAddress('onBehalfOf')\n    {\n      user,\n      reserve,\n      amount,\n      interestRateMode,\n      debtTokenAddress,\n      onBehalfOf,\n      referralCode,\n    }: LPBorrowParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      if (!debtTokenAddress) {\n        throw new Error(\n          `To borrow ETH you need to pass the stable or variable WETH debt Token Address corresponding the interestRateMode`\n        );\n      }\n      return this.wethGatewayService.borrowETH({\n        user,\n        amount,\n        debtTokenAddress,\n        interestRateMode,\n        referralCode,\n      });\n    }\n    const { decimalsOf }: IERC20ServiceInterface = this.erc20Service;\n    const reserveDecimals = await decimalsOf(reserve);\n    const formatAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      reserveDecimals\n    );\n\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.borrow(\n          reserve,\n          formatAmount,\n          numericRateMode,\n          referralCode || 0,\n          onBehalfOf || user\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async repay(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('onBehalfOf')\n    { user, reserve, amount, interestRateMode, onBehalfOf }: LPRepayParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (reserve.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return this.wethGatewayService.repayETH({\n        user,\n        amount,\n        interestRateMode,\n        onBehalfOf,\n      });\n    }\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const {\n      isApproved,\n      approve,\n      decimalsOf,\n    }: IERC20ServiceInterface = this.erc20Service;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n    const { populateTransaction }: ILendingPool = lendingPoolContract;\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n    const decimals: number = await decimalsOf(reserve);\n\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, decimals);\n\n    if (amount !== '-1') {\n      const fundsAvailable: boolean = await this.synthetixService.synthetixValidation(\n        user,\n        reserve,\n        convertedAmount\n      );\n      if (!fundsAvailable) {\n        throw new Error('Not enough funds to execute operation');\n      }\n    }\n\n    const approved: boolean = await isApproved(\n      reserve,\n      user,\n      this.lendingPoolAddress,\n      amount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        reserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        populateTransaction.repay(\n          reserve,\n          convertedAmount,\n          numericRateMode,\n          onBehalfOf || user\n        ),\n      from: user,\n      value: getTxValue(reserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.repay\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async swapBorrowRateMode(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    { user, reserve, interestRateMode }: LPSwapBorrowRateMode\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.swapBorrowRateMode(\n          reserve,\n          numericRateMode\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        txType: eEthereumTxType.DLP_ACTION,\n        tx: txCallback,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async setUsageAsCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('reserve')\n    { user, reserve, usageAsCollateral }: LPSetUsageAsCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.setUserUseReserveAsCollateral(\n          reserve,\n          usageAsCollateral\n        ),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @LPValidator\n  public async liquidationCall(\n    @IsEthAddress('liquidator')\n    @IsEthAddress('liquidatedUser')\n    @IsEthAddress('debtReserve')\n    @IsEthAddress('collateralReserve')\n    @IsPositiveAmount('purchaseAmount')\n    {\n      liquidator,\n      liquidatedUser,\n      debtReserve,\n      collateralReserve,\n      purchaseAmount,\n      getAToken,\n    }: LPLiquidationCall\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const {\n      isApproved,\n      approve,\n      getTokenData,\n    }: IERC20ServiceInterface = this.erc20Service;\n\n    const approved = await isApproved(\n      debtReserve,\n      liquidator,\n      this.lendingPoolAddress,\n      purchaseAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        liquidator,\n        debtReserve,\n        this.lendingPoolAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n\n      txs.push(approveTx);\n    }\n\n    const [debtReserveInfo]: TokenMetadataType[] = await Promise.all([\n      getTokenData(debtReserve),\n    ]);\n\n    const reserveDecimals: number = debtReserveInfo.decimals;\n\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      purchaseAmount,\n      reserveDecimals\n    );\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.liquidationCall(\n          collateralReserve,\n          debtReserve,\n          liquidatedUser,\n          convertedAmount,\n          getAToken || false\n        ),\n      from: liquidator,\n      value: getTxValue(debtReserve, convertedAmount),\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.liquidationCall\n      ),\n    });\n\n    return txs;\n  }\n\n  @LPValidator\n  public async swapCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('fromAsset')\n    @IsEthAddress('fromAToken')\n    @IsEthAddress('toAsset')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('fromAmount')\n    @IsPositiveAmount('toAmount')\n    {\n      user,\n      flash,\n      fromAsset,\n      fromAToken,\n      toAsset,\n      fromAmount,\n      toAmount,\n      maxSlippage,\n      permitSignature,\n      swapAll,\n      onBehalfOf,\n      referralCode,\n      useEthPath,\n    }: LPSwapCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const permitParams = permitSignature || {\n      amount: '0',\n      deadline: '0',\n      v: 0,\n      r: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      s: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    };\n\n    const { SWAP_COLLATERAL_ADAPTER } = commonContractAddressBetweenMarketsV2[\n      this.config.network\n    ];\n\n    const approved: boolean = await this.erc20Service.isApproved(\n      fromAToken,\n      user,\n      SWAP_COLLATERAL_ADAPTER,\n      fromAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = this.erc20Service.approve(\n        user,\n        fromAToken,\n        SWAP_COLLATERAL_ADAPTER,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveTx);\n    }\n\n    const tokenDecimals: number = await this.erc20Service.decimalsOf(fromAsset);\n\n    const convertedAmount: string = parseNumber(fromAmount, tokenDecimals);\n\n    const tokenToDecimals: number = await this.erc20Service.decimalsOf(toAsset);\n\n    const amountSlippage = (\n      Number(toAmount) -\n      (Number(toAmount) * Number(maxSlippage)) / 100\n    ).toString();\n\n    const amountSlippageConverted: string = parseNumber(\n      amountSlippage,\n      tokenToDecimals\n    );\n\n    const lendingPoolContract = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    if (flash) {\n      const FLASHLOAN_PREMIUM_TOTAL: BigNumber = await lendingPoolContract.FLASHLOAN_PREMIUM_TOTAL();\n      const convertedAmountNoFees: string = BigNumber.from(convertedAmount)\n        .sub(\n          BigNumber.from(convertedAmount)\n            .mul(FLASHLOAN_PREMIUM_TOTAL)\n            .div(10000)\n        )\n        .toString();\n\n      const amountWithSurplus: string = (\n        Number(fromAmount) +\n        (Number(fromAmount) * Number(SURPLUS)) / 100\n      ).toString();\n\n      const convertedAmountWithSurplus: string = parseNumber(\n        amountWithSurplus,\n        tokenDecimals\n      );\n\n      const params: string = utils.defaultAbiCoder.encode(\n        [\n          'address[]',\n          'uint256[]',\n          'bool[]',\n          'uint256[]',\n          'uint256[]',\n          'uint8[]',\n          'bytes32[]',\n          'bytes32[]',\n          'bool[]',\n        ],\n        [\n          [toAsset],\n          [amountSlippageConverted],\n          [swapAll],\n          [permitParams.amount],\n          [permitParams.deadline],\n          [permitParams.v],\n          [permitParams.r],\n          [permitParams.s],\n          [useEthPath || false],\n        ]\n      );\n\n      const txCallback: () => Promise<transactionType> = this.generateTxCallback(\n        {\n          rawTxMethod: () =>\n            lendingPoolContract.populateTransaction.flashLoan(\n              SWAP_COLLATERAL_ADAPTER,\n              [fromAsset],\n              swapAll ? [convertedAmountWithSurplus] : [convertedAmountNoFees],\n              [0], // interest rate mode to NONE for flashloan to not open debt\n              onBehalfOf || user,\n              params,\n              referralCode || '0'\n            ),\n          from: user,\n        }\n      );\n\n      txs.push({\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          txs,\n          txCallback,\n          ProtocolAction.swapCollateral\n        ),\n      });\n      return txs;\n    }\n\n    // Direct call to swap and deposit\n    const swapAndDepositTx: EthereumTransactionTypeExtended = await this.liquiditySwapAdapterService.swapAndDeposit(\n      {\n        user,\n        assetToSwapFrom: fromAsset,\n        assetToSwapTo: toAsset,\n        amountToSwap: swapAll\n          ? constants.MaxUint256.toString()\n          : convertedAmount,\n        minAmountToReceive: amountSlippageConverted,\n        permitParams,\n        useEthPath,\n      }\n    );\n\n    txs.push(swapAndDepositTx);\n    return txs;\n  }\n\n  @LPValidator\n  public async repayWithCollateral(\n    @IsEthAddress('user')\n    @IsEthAddress('fromAsset')\n    @IsEthAddress('fromAToken')\n    @IsEthAddress('assetToRepay')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('repayWithAmount')\n    @IsPositiveAmount('repayAmount')\n    {\n      user,\n      fromAsset,\n      fromAToken,\n      assetToRepay,\n      repayWithAmount,\n      repayAmount,\n      permitSignature,\n      repayAllDebt,\n      rateMode,\n      onBehalfOf,\n      referralCode,\n      flash,\n      useEthPath,\n    }: LPRepayWithCollateral\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const permitParams = permitSignature || {\n      amount: '0',\n      deadline: '0',\n      v: 0,\n      r: '0x0000000000000000000000000000000000000000000000000000000000000000',\n      s: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    };\n\n    const {\n      REPAY_WITH_COLLATERAL_ADAPTER,\n    } = commonContractAddressBetweenMarketsV2[this.config.network];\n\n    const approved: boolean = await this.erc20Service.isApproved(\n      fromAToken,\n      user,\n      REPAY_WITH_COLLATERAL_ADAPTER,\n      repayWithAmount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = this.erc20Service.approve(\n        user,\n        fromAToken,\n        REPAY_WITH_COLLATERAL_ADAPTER,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveTx);\n    }\n\n    const fromDecimals: number = await this.erc20Service.decimalsOf(fromAsset);\n    const convertedRepayWithAmount: string = parseNumber(\n      repayWithAmount,\n      fromDecimals\n    );\n\n    const repayAmountWithSurplus: string = (\n      Number(repayAmount) +\n      (Number(repayAmount) * Number(SURPLUS)) / 100\n    ).toString();\n\n    const decimals: number = await this.erc20Service.decimalsOf(assetToRepay);\n    const convertedRepayAmount: string = repayAllDebt\n      ? parseNumber(repayAmountWithSurplus, decimals)\n      : parseNumber(repayAmount, decimals);\n\n    let numericInterestRate = 0;\n    if (rateMode) {\n      numericInterestRate = rateMode === InterestRate.Stable ? 1 : 2;\n    }\n\n    if (flash) {\n      const params: string = utils.defaultAbiCoder.encode(\n        [\n          'address',\n          'uint256',\n          'uint256',\n          'uint256',\n          'uint256',\n          'uint8',\n          'bytes32',\n          'bytes32',\n          'bool',\n        ],\n        [\n          fromAsset,\n          convertedRepayWithAmount,\n          numericInterestRate,\n          permitParams.amount,\n          permitParams.deadline,\n          permitParams.v,\n          permitParams.r,\n          permitParams.s,\n          useEthPath || false,\n        ]\n      );\n\n      const lendingPoolContract = this.getContractInstance(\n        this.lendingPoolAddress\n      );\n\n      const txCallback: () => Promise<transactionType> = this.generateTxCallback(\n        {\n          rawTxMethod: () =>\n            lendingPoolContract.populateTransaction.flashLoan(\n              REPAY_WITH_COLLATERAL_ADAPTER,\n              [assetToRepay],\n              [convertedRepayAmount],\n              [0], // interest rate mode to NONE for flashloan to not open debt\n              onBehalfOf || user,\n              params,\n              referralCode || '0'\n            ),\n          from: user,\n        }\n      );\n\n      txs.push({\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation(\n          txs,\n          txCallback,\n          ProtocolAction.repayCollateral\n        ),\n      });\n\n      return txs;\n    }\n\n    const swapAndRepayTx: EthereumTransactionTypeExtended = this.repayWithCollateralAdapterService.swapAndRepay(\n      {\n        user,\n        collateralAsset: fromAsset,\n        debtAsset: assetToRepay,\n        collateralAmount: convertedRepayWithAmount,\n        debtRepayAmount: convertedRepayAmount,\n        debtRateMode: numericInterestRate,\n        permit: permitParams,\n        useEthPath,\n      }\n    );\n\n    txs.push(swapAndRepayTx);\n\n    return txs;\n  }\n\n  @LPValidator\n  public async flashLiquidation(\n    @IsEthAddress('user')\n    @IsEthAddress('collateralAsset')\n    @IsEthAddress('borrowedAsset')\n    @IsPositiveAmount('debtTokenCover')\n    @IsEthAddress('initiator')\n    {\n      user,\n      collateralAsset,\n      borrowedAsset,\n      debtTokenCover,\n      liquidateAll,\n      initiator,\n      useEthPath,\n    }: LPFlashLiquidation\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const addSurplus = (amount: string): string => {\n      return (\n        Number(amount) +\n        (Number(amount) * Number(amount)) / 100\n      ).toString();\n    };\n\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const { FLASHLIQUIDATION } = commonContractAddressBetweenMarketsV2[\n      this.config.network\n    ];\n\n    const lendingPoolContract: ILendingPool = this.getContractInstance(\n      this.lendingPoolAddress\n    );\n\n    const tokenDecimals: number = await this.erc20Service.decimalsOf(\n      borrowedAsset\n    );\n\n    const convertedDebt = parseNumber(debtTokenCover, tokenDecimals);\n\n    const convertedDebtTokenCover: string = liquidateAll\n      ? constants.MaxUint256.toString()\n      : convertedDebt;\n\n    const flashBorrowAmount = liquidateAll\n      ? parseNumber(addSurplus(debtTokenCover), tokenDecimals)\n      : convertedDebt;\n\n    const params: string = utils.defaultAbiCoder.encode(\n      ['address', 'address', 'address', 'uint256', 'bool'],\n      [\n        collateralAsset,\n        borrowedAsset,\n        user,\n        convertedDebtTokenCover,\n        useEthPath || false,\n      ]\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        lendingPoolContract.populateTransaction.flashLoan(\n          FLASHLIQUIDATION,\n          [borrowedAsset],\n          [flashBorrowAmount],\n          [0],\n          initiator,\n          params,\n          '0'\n        ),\n      from: initiator,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.liquidationFlash\n      ),\n    });\n    return txs;\n  }\n}\n","import { BigNumber } from 'ethers';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n  TokenMetadataType,\n} from '../types';\nimport { API_ETH_MOCK_ADDRESS, SUPER_BIG_ALLOWANCE_NUMBER } from '../config';\nimport { IERC20Detailed, IERC20Detailed__factory } from '../contract-types';\nimport BaseService from './BaseService';\nimport { parseNumber } from '../utils/parsings';\n\nexport default class ERC20Service\n  extends BaseService<IERC20Detailed>\n  implements IERC20ServiceInterface {\n  readonly tokenDecimals: { [address: string]: number };\n\n  constructor(config: Configuration) {\n    super(config, IERC20Detailed__factory);\n    this.tokenDecimals = {};\n  }\n\n  public approve = (\n    user: tEthereumAddress,\n    token: tEthereumAddress,\n    spender: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): EthereumTransactionTypeExtended => {\n    const erc20Contract = this.getContractInstance(token);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        erc20Contract.populateTransaction.approve(spender, amount),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.ERC20_APPROVAL,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  };\n\n  public isApproved = async (\n    token: tEthereumAddress,\n    userAddress: tEthereumAddress,\n    spender: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<boolean> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) return true;\n    const decimals = await this.decimalsOf(token);\n    const erc20Contract: IERC20Detailed = this.getContractInstance(token);\n    const allowance: BigNumber = await erc20Contract.allowance(\n      userAddress,\n      spender\n    );\n    const amountBNWithDecimals: BigNumber =\n      amount === '-1'\n        ? BigNumber.from(SUPER_BIG_ALLOWANCE_NUMBER)\n        : BigNumber.from(parseNumber(amount, decimals));\n    return allowance.gte(amountBNWithDecimals);\n  };\n\n  public decimalsOf = async (token: tEthereumAddress): Promise<number> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) return 18;\n    if (!this.tokenDecimals[token]) {\n      const erc20Contract = this.getContractInstance(token);\n      this.tokenDecimals[token] = await erc20Contract.decimals();\n    }\n\n    return this.tokenDecimals[token];\n  };\n\n  public getTokenData = async (\n    token: tEthereumAddress\n  ): Promise<TokenMetadataType> => {\n    if (token.toLowerCase() === API_ETH_MOCK_ADDRESS.toLowerCase()) {\n      return {\n        name: 'Ethereum',\n        symbol: 'ETH',\n        decimals: 18,\n        address: token,\n      };\n    }\n    // Needed because MKR does not return string for symbol and Name\n    if (\n      token.toLowerCase() ===\n      '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2'.toLowerCase()\n    ) {\n      return {\n        name: 'Maker',\n        symbol: 'MKR',\n        decimals: 18,\n        address: token,\n      };\n    }\n\n    const {\n      name: nameGetter,\n      symbol: symbolGetter,\n      decimals: decimalsGetter,\n    }: IERC20Detailed = this.getContractInstance(token);\n\n    const [name, symbol, decimals]: [\n      string,\n      string,\n      number\n    ] = await Promise.all([nameGetter(), symbolGetter(), decimalsGetter()]);\n\n    return {\n      name,\n      symbol,\n      decimals,\n      address: token,\n    };\n  };\n}\n","import {\n  commonContractAddressBetweenMarketsV2,\n  DEFAULT_NULL_VALUE_ON_TX,\n  enabledNetworksByService,\n} from '../config';\nimport {\n  IFaucet,\n  IMinter,\n  IFaucet__factory,\n  IMinter__factory,\n} from '../contract-types';\nimport FaucetInterface from '../interfaces/Faucet';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringDecimalUnits,\n} from '../types';\nimport { FaucetParamsType } from '../types/FaucetMethodTypes';\nimport { mintAmountsPerToken } from '../utils/parsings';\nimport { FaucetValidator } from '../validators/methodValidators';\nimport { IsEthAddress } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class FaucetService\n  extends BaseService<IMinter>\n  implements FaucetInterface {\n  readonly faucetAddress: string;\n\n  readonly faucetContract: IFaucet;\n\n  constructor(config: Configuration) {\n    super(config, IMinter__factory);\n\n    const { provider, network } = this.config;\n\n    const { FAUCET } = commonContractAddressBetweenMarketsV2[network];\n    this.faucetAddress = FAUCET;\n\n    if (enabledNetworksByService.faucet.indexOf(network) > -1) {\n      this.faucetContract = IFaucet__factory.connect(\n        this.faucetAddress,\n        provider\n      );\n    }\n  }\n\n  @FaucetValidator\n  public async mint(\n    @IsEthAddress('userAddress')\n    @IsEthAddress('reserve')\n    { userAddress, reserve, tokenSymbol }: FaucetParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const amount: string = mintAmountsPerToken[tokenSymbol];\n    const txValue = await this.getTxValue(reserve, amount);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        this.faucetContract.populateTransaction.mint(reserve, amount),\n      from: userAddress,\n      value: txValue,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.FAUCET_MINT,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  private async getTxValue(\n    token: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): Promise<tStringDecimalUnits> {\n    const minterAddress: string = await this.faucetContract.getMinter(token);\n    const minterContract: IMinter = this.getContractInstance(minterAddress);\n\n    const isEthRequired: boolean = await minterContract.isEthRequired();\n\n    return isEthRequired ? amount : DEFAULT_NULL_VALUE_ON_TX;\n  }\n}\n","import IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  commonContractAddressBetweenMarketsV2,\n  DEFAULT_APPROVE_AMOUNT,\n} from '../config';\nimport {\n  ILendToAaveMigrator,\n  ILendToAaveMigrator__factory,\n} from '../contract-types';\nimport LTAMigratorInterface from '../interfaces/LTAMigrator';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  Network,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport BaseService from './BaseService';\n\nexport default class LTAMigratorService\n  extends BaseService<ILendToAaveMigrator>\n  implements LTAMigratorInterface {\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly migratorAddress: string;\n\n  constructor(config: Configuration, erc20Service: IERC20ServiceInterface) {\n    super(config, ILendToAaveMigrator__factory);\n    this.erc20Service = erc20Service;\n    const { network }: Configuration = this.config;\n\n    this.migratorAddress =\n      commonContractAddressBetweenMarketsV2[network].LEND_TO_AAVE_MIGRATOR;\n  }\n\n  public migrateLendToAave = async (\n    user: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> => {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    // TODO: delete conditional when mainnet address\n    if (this.config.network === Network.ropsten) {\n      return txs;\n    }\n\n    const { isApproved, approve, decimalsOf } = this.erc20Service;\n\n    const migratorContract: ILendToAaveMigrator = this.getContractInstance(\n      this.migratorAddress\n    );\n    const lendToken: string = await migratorContract.LEND();\n\n    const approved: boolean = await isApproved(\n      lendToken,\n      user,\n      this.migratorAddress,\n      amount\n    );\n\n    if (!approved) {\n      txs.push(\n        approve(user, lendToken, this.migratorAddress, DEFAULT_APPROVE_AMOUNT)\n      );\n    }\n\n    const decimals: number = await decimalsOf(lendToken);\n    const convertedAmount: string = await parseNumber(amount, decimals);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        migratorContract.populateTransaction.migrateFromLEND(convertedAmount),\n      from: user,\n    });\n\n    txs.push({\n      txType: eEthereumTxType.MIGRATION_LEND_AAVE,\n      tx: txCallback,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  };\n}\n","import { constants, utils, Signature } from 'ethers';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  DEFAULT_APPROVE_AMOUNT,\n  distinctStakingAddressesBetweenTokens,\n  MAX_UINT_AMOUNT,\n} from '../config';\nimport {\n  IStakedToken,\n  IAaveStakingHelper,\n  IAaveStakingHelper__factory,\n  IStakedToken__factory,\n} from '../contract-types';\nimport StakingInterface from '../interfaces/Staking';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  Stake,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport { StakingValidator } from '../validators/methodValidators';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n  Optional,\n} from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class StakingService\n  extends BaseService<IStakedToken>\n  implements StakingInterface {\n  readonly stakingHelperContract: IAaveStakingHelper;\n\n  readonly stakingContractAddress: string;\n\n  readonly stakingHelperContractAddress: string;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  readonly tokenStake: Stake;\n\n  readonly canUsePermit: boolean;\n\n  constructor(\n    config: Configuration,\n    erc20Service: IERC20ServiceInterface,\n    tokenStake: Stake\n  ) {\n    super(config, IStakedToken__factory);\n    this.tokenStake = tokenStake;\n    this.erc20Service = erc20Service;\n\n    const { provider, network } = this.config;\n\n    const {\n      TOKEN_STAKING_ADDRESS,\n      STAKING_HELPER_ADDRESS,\n      canUsePermit,\n    } = distinctStakingAddressesBetweenTokens[this.tokenStake][network];\n\n    this.stakingContractAddress = TOKEN_STAKING_ADDRESS;\n    this.stakingHelperContractAddress = STAKING_HELPER_ADDRESS;\n    this.canUsePermit = canUsePermit;\n\n    if (this.canUsePermit) {\n      this.stakingHelperContract = IAaveStakingHelper__factory.connect(\n        STAKING_HELPER_ADDRESS,\n        provider\n      );\n    }\n  }\n\n  @StakingValidator\n  public async signStaking(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    nonce: string\n  ): Promise<string> {\n    if (!this.canUsePermit) return '';\n\n    const { getTokenData } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const { name, decimals } = await getTokenData(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, decimals);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        Permit: [\n          { name: 'owner', type: 'address' },\n          { name: 'spender', type: 'address' },\n          { name: 'value', type: 'uint256' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'deadline', type: 'uint256' },\n        ],\n      },\n      primaryType: 'Permit' as const,\n      domain: {\n        name,\n        version: '1',\n        chainId: ChainId[this.config.network],\n        verifyingContract: stakedToken,\n      },\n      message: {\n        owner: user,\n        spender: this.stakingHelperContractAddress,\n        value: convertedAmount,\n        nonce,\n        deadline: constants.MaxUint256.toString(),\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @StakingValidator\n  public async stakeWithPermit(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    signature: string\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    if (!this.canUsePermit) return [];\n\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { decimalsOf } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      stakedTokenDecimals\n    );\n    const sig: Signature = utils.splitSignature(signature);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        this.stakingHelperContract.populateTransaction.stake(\n          user,\n          convertedAmount,\n          sig.v,\n          sig.r,\n          sig.s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.STAKE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @StakingValidator\n  public async stake(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveAmount() amount: tStringCurrencyUnits,\n    @Optional @IsEthAddress() onBehalfOf?: tEthereumAddress\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { decimalsOf, isApproved, approve } = this.erc20Service;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    const stakedToken: string = await stakingContract.STAKED_TOKEN();\n    const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n    const convertedAmount: tStringDecimalUnits = parseNumber(\n      amount,\n      stakedTokenDecimals\n    );\n    const approved: boolean = await isApproved(\n      stakedToken,\n      user,\n      this.stakingContractAddress,\n      amount\n    );\n    if (!approved) {\n      const approveTx = approve(\n        user,\n        stakedToken,\n        this.stakingContractAddress,\n        DEFAULT_APPROVE_AMOUNT\n      );\n      txs.push(approveTx);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.stake(\n          onBehalfOf || user,\n          convertedAmount\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.STAKE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @StakingValidator\n  public async redeem(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveOrMinusOneAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    let convertedAmount: tStringDecimalUnits;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    if (amount === '-1') {\n      convertedAmount = MAX_UINT_AMOUNT;\n    } else {\n      const { decimalsOf } = this.erc20Service;\n\n      const stakedToken: string = await stakingContract.STAKED_TOKEN();\n      const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n      convertedAmount = parseNumber(amount, stakedTokenDecimals);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.redeem(user, convertedAmount),\n      from: user,\n      gasSurplus: 20,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @StakingValidator\n  public async cooldown(\n    @IsEthAddress() user: tEthereumAddress\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => stakingContract.populateTransaction.cooldown(),\n      from: user,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @StakingValidator\n  public async claimRewards(\n    @IsEthAddress() user: tEthereumAddress,\n    @IsPositiveOrMinusOneAmount() amount: tStringCurrencyUnits\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    let convertedAmount: tStringDecimalUnits;\n    const stakingContract: IStakedToken = this.getContractInstance(\n      this.stakingContractAddress\n    );\n    if (amount === '-1') {\n      convertedAmount = MAX_UINT_AMOUNT;\n    } else {\n      const { decimalsOf } = this.erc20Service;\n      const stakedToken: string = await stakingContract.REWARD_TOKEN();\n      const stakedTokenDecimals: number = await decimalsOf(stakedToken);\n      convertedAmount = parseNumber(amount, stakedTokenDecimals);\n    }\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        stakingContract.populateTransaction.claimRewards(user, convertedAmount),\n      from: user,\n      gasSurplus: 20,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.STAKE_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { BigNumber } from 'ethers';\nimport BaseService from './BaseService';\nimport { Configuration, tStringDecimalUnits } from '../types';\nimport { ISynthetix, ISynthetix__factory } from '../contract-types';\nimport SynthetixInterface from '../interfaces/Synthetix';\nimport { commonContractAddressBetweenMarketsV2 } from '../config';\n\nexport default class SynthetixService\n  extends BaseService<ISynthetix>\n  implements SynthetixInterface {\n  constructor(config: Configuration) {\n    super(config, ISynthetix__factory);\n  }\n\n  public synthetixValidation = async (\n    userAddress: string,\n    reserve: string,\n    amount: tStringDecimalUnits\n  ): Promise<boolean> => {\n    const synthAddress =\n      commonContractAddressBetweenMarketsV2[this.config.network]\n        .SYNTHETIX_PROXY_ADDRESS;\n\n    if (reserve.toUpperCase() === synthAddress.toUpperCase()) {\n      return this.isSnxTransferable(userAddress, amount);\n    }\n    return true;\n  };\n\n  readonly isSnxTransferable = async (\n    userAddress: string,\n    amount: tStringDecimalUnits\n  ): Promise<boolean> => {\n    const synthContract = this.getContractInstance(\n      commonContractAddressBetweenMarketsV2[this.config.network]\n        .SYNTHETIX_PROXY_ADDRESS\n    );\n\n    const transferableAmount: BigNumber = await synthContract.transferableSynthetix(\n      userAddress\n    );\n    return BigNumber.from(amount).lte(transferableAmount);\n  };\n}\n","import { ethers, providers } from 'ethers';\nimport FaucetInterface from './interfaces/Faucet';\nimport IERC20ServiceInterface from './interfaces/ERC20';\nimport LTAMigratorInterface from './interfaces/LTAMigrator';\nimport StakingInterface from './interfaces/Staking';\nimport SynthetixInterface from './interfaces/Synthetix';\nimport ERC20Service from './services/ERC20';\nimport FaucetService from './services/Faucet';\nimport LTAMigratorService from './services/LTAMigrator';\nimport StakingService from './services/Staking';\nimport SynthetixService from './services/SynthetixService';\nimport { Configuration, DefaultProviderKeys, Network, Stake } from './types';\n\nexport default class BaseTxBuilder {\n  readonly configuration: Configuration;\n\n  public erc20Service: IERC20ServiceInterface;\n\n  public synthetixService: SynthetixInterface;\n\n  public ltaMigratorService: LTAMigratorInterface;\n\n  public faucetService: FaucetInterface;\n\n  readonly stakings: { [stake: string]: StakingInterface };\n\n  constructor(\n    network: Network = Network.mainnet,\n    injectedProvider?:\n      | providers.ExternalProvider\n      | providers.Web3Provider\n      | string\n      | undefined,\n    defaultProviderKeys?: DefaultProviderKeys\n  ) {\n    let provider:\n      | providers.JsonRpcProvider\n      | providers.BaseProvider\n      | providers.Web3Provider;\n\n    if (!injectedProvider) {\n      if (defaultProviderKeys && Object.keys(defaultProviderKeys).length > 1) {\n        provider = ethers.getDefaultProvider(network, defaultProviderKeys);\n      } else {\n        provider = ethers.getDefaultProvider(network);\n        console.log(\n          `These API keys are a provided as a community resource by the backend services for low-traffic projects and for early prototyping.\n          It is highly recommended to use own keys: https://docs.ethers.io/v5/api-keys/`\n        );\n      }\n    } else if (typeof injectedProvider === 'string') {\n      provider = new providers.JsonRpcProvider(injectedProvider, network);\n    } else if (injectedProvider instanceof providers.Web3Provider) {\n      provider = injectedProvider;\n    } else {\n      provider = new providers.Web3Provider(injectedProvider, network);\n    }\n\n    this.configuration = { network, provider };\n\n    this.erc20Service = new ERC20Service(this.configuration);\n    this.synthetixService = new SynthetixService(this.configuration);\n    this.ltaMigratorService = new LTAMigratorService(\n      this.configuration,\n      this.erc20Service\n    );\n    this.faucetService = new FaucetService(this.configuration);\n\n    this.stakings = {};\n  }\n\n  public getStaking = (stake?: Stake): StakingInterface => {\n    const stakeToken = stake || Stake.Aave;\n    if (!this.stakings[stakeToken]) {\n      this.stakings[stakeToken] = new StakingService(\n        this.configuration,\n        this.erc20Service,\n        stakeToken\n      );\n    }\n\n    return this.stakings[stakeToken];\n  };\n}\n","import { constants } from 'ethers';\nimport { commonContractAddressBetweenMarketsV2 } from '../config';\nimport { IWETHGateway, IWETHGateway__factory } from '../contract-types';\nimport BaseDebtTokenInterface from '../interfaces/BaseDebtToken';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport WETHGatewayInterface from '../interfaces/WETHGateway';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  InterestRate,\n  ProtocolAction,\n  transactionType,\n  tStringDecimalUnits,\n} from '../types';\nimport {\n  WETHBorrowParamsType,\n  WETHDepositParamsType,\n  WETHRepayParamsType,\n  WETHWithdrawParamsType,\n} from '../types/WethGatewayMethodTypes';\nimport { parseNumber } from '../utils/parsings';\nimport { WETHValidator } from '../validators/methodValidators';\nimport {\n  IsEthAddress,\n  IsPositiveAmount,\n  IsPositiveOrMinusOneAmount,\n} from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class WETHGatewayService\n  extends BaseService<IWETHGateway>\n  implements WETHGatewayInterface {\n  readonly wethGatewayAddress: string;\n\n  readonly config: Configuration;\n\n  readonly baseDebtTokenService: BaseDebtTokenInterface;\n\n  readonly erc20Service: IERC20ServiceInterface;\n\n  constructor(\n    config: Configuration,\n    baseDebtTokenService: BaseDebtTokenInterface,\n    erc20Service: IERC20ServiceInterface\n  ) {\n    super(config, IWETHGateway__factory);\n    this.config = config;\n    this.baseDebtTokenService = baseDebtTokenService;\n    this.erc20Service = erc20Service;\n\n    const { network } = this.config;\n    const { WETH_GATEWAY } = commonContractAddressBetweenMarketsV2[network];\n\n    this.wethGatewayAddress = WETH_GATEWAY;\n  }\n\n  @WETHValidator\n  public async depositETH(\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('amount')\n    { user, amount, onBehalfOf, referralCode }: WETHDepositParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.depositETH(\n          onBehalfOf || user,\n          referralCode || '0'\n        ),\n      from: user,\n      value: convertedAmount,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n\n  @WETHValidator\n  public async borrowETH(\n    @IsEthAddress('user')\n    @IsPositiveAmount('amount')\n    @IsEthAddress('debtTokenAddress')\n    {\n      user,\n      amount,\n      debtTokenAddress,\n      interestRateMode,\n      referralCode,\n    }: WETHBorrowParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n\n    const delegationApproved: boolean = await this.baseDebtTokenService.isDelegationApproved(\n      debtTokenAddress,\n      user,\n      this.wethGatewayAddress,\n      amount\n    );\n\n    if (!delegationApproved) {\n      const approveDelegationTx: EthereumTransactionTypeExtended = this.baseDebtTokenService.approveDelegation(\n        user,\n        this.wethGatewayAddress,\n        debtTokenAddress,\n        constants.MaxUint256.toString()\n      );\n\n      txs.push(approveDelegationTx);\n    }\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.borrowETH(\n          convertedAmount,\n          numericRateMode,\n          referralCode || '0'\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.borrowETH\n      ),\n    });\n\n    return txs;\n  }\n\n  @WETHValidator\n  public async withdrawETH(\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveOrMinusOneAmount('amount')\n    @IsEthAddress('aTokenAddress')\n    { user, amount, onBehalfOf, aTokenAddress }: WETHWithdrawParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const { isApproved, approve }: IERC20ServiceInterface = this.erc20Service;\n    const convertedAmount: tStringDecimalUnits =\n      amount === '-1'\n        ? constants.MaxUint256.toString()\n        : parseNumber(amount, 18);\n\n    const approved: boolean = await isApproved(\n      aTokenAddress,\n      user,\n      this.wethGatewayAddress,\n      amount\n    );\n\n    if (!approved) {\n      const approveTx: EthereumTransactionTypeExtended = approve(\n        user,\n        aTokenAddress,\n        this.wethGatewayAddress,\n        constants.MaxUint256.toString()\n      );\n      txs.push(approveTx);\n    }\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.withdrawETH(\n          convertedAmount,\n          onBehalfOf || user\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation(\n        txs,\n        txCallback,\n        ProtocolAction.withdrawETH\n      ),\n    });\n\n    return txs;\n  }\n\n  @WETHValidator\n  public async repayETH(\n    @IsEthAddress('user')\n    @IsEthAddress('onBehalfOf')\n    @IsPositiveAmount('amount')\n    { user, amount, interestRateMode, onBehalfOf }: WETHRepayParamsType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const convertedAmount: tStringDecimalUnits = parseNumber(amount, 18);\n    const numericRateMode = interestRateMode === InterestRate.Variable ? 2 : 1;\n    const wethGatewayContract: IWETHGateway = this.getContractInstance(\n      this.wethGatewayAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        wethGatewayContract.populateTransaction.repayETH(\n          convertedAmount,\n          numericRateMode,\n          onBehalfOf || user\n        ),\n      from: user,\n      value: convertedAmount,\n    });\n\n    return [\n      {\n        tx: txCallback,\n        txType: eEthereumTxType.DLP_ACTION,\n        gas: this.generateTxPriceEstimation([], txCallback),\n      },\n    ];\n  }\n}\n","import { BigNumber } from 'ethers';\nimport { IDebtTokenBase, IDebtTokenBase__factory } from '../contract-types';\nimport BaseDebtTokenInterface from '../interfaces/BaseDebtToken';\nimport IERC20ServiceInterface from '../interfaces/ERC20';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringCurrencyUnits,\n  tStringDecimalUnits,\n} from '../types';\nimport { parseNumber } from '../utils/parsings';\nimport BaseService from './BaseService';\n\nexport default class BaseDebtToken\n  extends BaseService<IDebtTokenBase>\n  implements BaseDebtTokenInterface {\n  readonly erc20Service: IERC20ServiceInterface;\n\n  constructor(config: Configuration, erc20Service: IERC20ServiceInterface) {\n    super(config, IDebtTokenBase__factory);\n    this.erc20Service = erc20Service;\n  }\n\n  public approveDelegation(\n    user: tEthereumAddress,\n    delegatee: tEthereumAddress,\n    debtTokenAddress: tEthereumAddress,\n    amount: tStringDecimalUnits\n  ): EthereumTransactionTypeExtended {\n    const debtTokenContract: IDebtTokenBase = this.getContractInstance(\n      debtTokenAddress\n    );\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        debtTokenContract.populateTransaction.approveDelegation(\n          delegatee,\n          amount\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.ERC20_APPROVAL,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n\n  public async isDelegationApproved(\n    debtTokenAddress: tEthereumAddress,\n    allowanceGiver: tEthereumAddress,\n    allowanceReceiver: tEthereumAddress,\n    amount: tStringCurrencyUnits\n  ): Promise<boolean> {\n    const decimals: number = await this.erc20Service.decimalsOf(\n      debtTokenAddress\n    );\n    const debtTokenContract: IDebtTokenBase = this.getContractInstance(\n      debtTokenAddress\n    );\n    const delegatedAllowance: BigNumber = await debtTokenContract.borrowAllowance(\n      allowanceGiver,\n      allowanceReceiver\n    );\n    const amountBNWithDecimals: BigNumber = BigNumber.from(\n      parseNumber(amount, decimals)\n    );\n\n    return delegatedAllowance.gt(amountBNWithDecimals);\n  }\n}\n","import { commonContractAddressBetweenMarketsV2 } from '../config';\nimport { ISwapCollateral__factory, ISwapCollateral } from '../contract-types';\nimport LiquiditySwapAdapterInterface from '../interfaces/LiquiditySwapAdapter';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  transactionType,\n} from '../types';\nimport { SwapAndDepositMethodType } from '../types/LiquiditySwapAdapterMethodTypes';\nimport { LiquiditySwapValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class LiquiditySwapAdapterService\n  extends BaseService<ISwapCollateral>\n  implements LiquiditySwapAdapterInterface {\n  readonly liquiditySwapAdapterAddress: string;\n\n  constructor(config: Configuration) {\n    super(config, ISwapCollateral__factory);\n\n    const { SWAP_COLLATERAL_ADAPTER } = commonContractAddressBetweenMarketsV2[\n      this.config.network\n    ];\n    this.liquiditySwapAdapterAddress = SWAP_COLLATERAL_ADAPTER;\n  }\n\n  @LiquiditySwapValidator\n  public swapAndDeposit(\n    @IsEthAddress('user')\n    @IsEthAddress('assetToSwapFrom')\n    @IsEthAddress('assetToSwapTo')\n    @IsPositiveAmount('amountToSwap')\n    @IsPositiveAmount('minAmountToReceive')\n    {\n      user,\n      assetToSwapFrom,\n      assetToSwapTo,\n      amountToSwap,\n      minAmountToReceive,\n      permitParams,\n      useEthPath,\n    }: SwapAndDepositMethodType\n  ): EthereumTransactionTypeExtended {\n    const liquiditySwapContract = this.getContractInstance(\n      this.liquiditySwapAdapterAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        liquiditySwapContract.populateTransaction.swapAndDeposit(\n          [assetToSwapFrom],\n          [assetToSwapTo],\n          [amountToSwap],\n          [minAmountToReceive],\n          [permitParams],\n          [useEthPath || false]\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n}\n","import { BytesLike } from 'ethers';\nimport { tEthereumAddress } from '.';\n\nexport enum ExecutorType {\n  Short,\n  Long,\n}\n\nexport type GovCreateType = {\n  user: tEthereumAddress;\n  targets: tEthereumAddress[];\n  values: string[];\n  signatures: string[];\n  calldatas: BytesLike[];\n  withDelegateCalls: boolean[];\n  ipfsHash: BytesLike;\n  executor: ExecutorType;\n};\nexport type GovCancelType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovQueueType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovExecuteType = {\n  user: tEthereumAddress;\n  proposalId: number;\n};\nexport type GovSubmitVoteType = {\n  user: tEthereumAddress;\n  proposalId: number;\n  support: boolean;\n};\nexport type GovSubmitVoteSignType = {\n  user: tEthereumAddress;\n  proposalId: number;\n  support: boolean;\n  signature: string;\n};\n\nexport type GovSignVotingType = {\n  user: tEthereumAddress;\n  support: boolean;\n  proposalId: number;\n  nonce: number;\n};\n\nexport type GovGetProposalsType = {\n  skip: number;\n  limit: number;\n};\n\nexport type GovGetProposalType = {\n  proposalId: number;\n};\n\nexport type GovGetVotingSupplyType = {\n  block: number;\n  strategy: tEthereumAddress;\n};\n\nexport type GovGetVotingAtBlockType = {\n  user: tEthereumAddress;\n  strategy: tEthereumAddress;\n  block: number;\n};\n\nexport type GovGetTokensVotingPower = {\n  user: tEthereumAddress;\n  tokens: tEthereumAddress[];\n};\n\nexport type GovGetVoteOnProposal = {\n  proposalId: string;\n  user: tEthereumAddress;\n};\n","import { BigNumber } from 'ethers';\nimport { tEthereumAddress } from '.';\n\nexport enum ProposalState {\n  Pending = 'Pending',\n  Canceled = 'Canceled',\n  Active = 'Active',\n  Failed = 'Failed',\n  Succeeded = 'Succeeded',\n  Queued = 'Queued',\n  Expired = 'Expired',\n  Executed = 'Executed',\n}\n\nexport type Proposal = {\n  id: number;\n  title: string;\n  description: string;\n  shortDescription: string;\n  creator: tEthereumAddress;\n  executor: tEthereumAddress;\n  targets: tEthereumAddress[];\n  values: BigNumber[];\n  signatures: string[];\n  calldatas: string[];\n  withDelegatecalls: boolean[];\n  startBlock: number;\n  endBlock: number;\n  executionTime: string;\n  executionTimeWithGracePeriod: string;\n  forVotes: string;\n  againstVotes: string;\n  executed: boolean;\n  canceled: boolean;\n  strategy: string;\n  ipfsHash: string;\n  state: ProposalState;\n  minimumQuorum: string;\n  minimumDiff: string;\n  proposalCreated: number;\n  totalVotingSupply: string;\n};\n\nexport type ProposalRPC = {\n  totalVotingSupply: BigNumber;\n  minimumQuorum: BigNumber;\n  minimumDiff: BigNumber;\n  executionTimeWithGracePeriod: BigNumber;\n  proposalCreated: BigNumber;\n  id: BigNumber;\n  creator: string;\n  executor: string;\n  targets: string[];\n  values: BigNumber[];\n  signatures: string[];\n  calldatas: string[];\n  withDelegatecalls: boolean[];\n  startBlock: BigNumber;\n  endBlock: BigNumber;\n  executionTime: BigNumber;\n  forVotes: BigNumber;\n  againstVotes: BigNumber;\n  executed: boolean;\n  canceled: boolean;\n  strategy: string;\n  ipfsHash: string;\n  proposalState: number;\n};\n\nexport type ProposalMetadata = {\n  title: string;\n  description: string;\n  shortDescription: string;\n  ipfsHash: string;\n};\n\nexport type Power = {\n  votingPower: BigNumber;\n  delegatedAddressVotingPower: string;\n  propositionPower: BigNumber;\n  delegatedAddressPropositionPower: string;\n};\n\nexport type Vote = { support: boolean; votingPower: BigNumber };\n","import { commonContractAddressBetweenMarketsV2 } from '../config';\nimport {\n  IRepayWithCollateral,\n  IRepayWithCollateral__factory,\n} from '../contract-types';\nimport RepayWithCollateralAdapterInterface from '../interfaces/RepayWithCollateralAdapter';\nimport {\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  transactionType,\n} from '../types';\nimport { RepayWithCollateralType } from '../types/RepayWithCollateralMethodTypes';\nimport { RepayWithCollateralValidator } from '../validators/methodValidators';\nimport { IsEthAddress, IsPositiveAmount } from '../validators/paramValidators';\nimport BaseService from './BaseService';\n\nexport default class RepayWithCollateralAdapterService\n  extends BaseService<IRepayWithCollateral>\n  implements RepayWithCollateralAdapterInterface {\n  readonly repayWithCollateralAddress: string;\n\n  constructor(config: Configuration) {\n    super(config, IRepayWithCollateral__factory);\n\n    const {\n      REPAY_WITH_COLLATERAL_ADAPTER,\n    } = commonContractAddressBetweenMarketsV2[this.config.network];\n\n    this.repayWithCollateralAddress = REPAY_WITH_COLLATERAL_ADAPTER;\n  }\n\n  @RepayWithCollateralValidator\n  public swapAndRepay(\n    @IsEthAddress('user')\n    @IsEthAddress('collateralAsset')\n    @IsEthAddress('debtAsset')\n    @IsPositiveAmount('collateralAmount')\n    @IsPositiveAmount('debtRepayAmount')\n    {\n      user,\n      collateralAsset,\n      debtAsset,\n      collateralAmount,\n      debtRepayAmount,\n      debtRateMode,\n      permit,\n      useEthPath,\n    }: RepayWithCollateralType\n  ): EthereumTransactionTypeExtended {\n    const repayWithCollateralContract: IRepayWithCollateral = this.getContractInstance(\n      this.repayWithCollateralAddress\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        repayWithCollateralContract.populateTransaction.swapAndRepay(\n          collateralAsset,\n          debtAsset,\n          collateralAmount,\n          debtRepayAmount,\n          debtRateMode,\n          permit,\n          useEthPath || false\n        ),\n      from: user,\n    });\n\n    return {\n      tx: txCallback,\n      txType: eEthereumTxType.DLP_ACTION,\n      gas: this.generateTxPriceEstimation([], txCallback),\n    };\n  }\n}\n","import axios from 'axios';\nimport { base58 } from 'ethers/lib/utils';\nimport { ProposalMetadata } from '../types/GovernanceV2ReturnTypes';\n\nconst ipfsEndpoint = 'https://cloudflare-ipfs.com/ipfs';\n\nexport function getLink(hash: string): string {\n  return `${ipfsEndpoint}/${hash}`;\n}\n\ninterface MemorizeMetadata {\n  [key: string]: ProposalMetadata;\n}\n\nconst MEMORIZE: MemorizeMetadata = {};\n\nexport async function getProposalMetadata(\n  hash: string\n): Promise<ProposalMetadata> {\n  const ipfsHash = base58.encode(Buffer.from(`1220${hash.slice(2)}`, 'hex'));\n  if (MEMORIZE[ipfsHash]) return MEMORIZE[ipfsHash];\n  try {\n    const { data } = await axios.get(getLink(ipfsHash), { timeout: 2000 });\n\n    if (!data?.title) {\n      throw Error('Missing title field at proposal metadata.');\n    }\n    if (!data?.description) {\n      throw Error('Missing description field at proposal metadata.');\n    }\n    if (!data?.shortDescription) {\n      throw Error('Missing shortDescription field at proposal metadata.');\n    }\n\n    MEMORIZE[ipfsHash] = {\n      ipfsHash,\n      title: data.title,\n      description: data.description,\n      shortDescription: data.shortDescription,\n    };\n    return MEMORIZE[ipfsHash];\n  } catch (e) {\n    console.error(`@aave/protocol-js: IPFS fetch Error: ${e.message}`);\n    return {\n      ipfsHash,\n      title: `Proposal - ${ipfsHash}`,\n      description: `Proposal with invalid metadata format or IPFS gateway is down`,\n      shortDescription: `Proposal with invalid metadata format or IPFS gateway is down`,\n    };\n  }\n}\n","import { Signature, utils } from 'ethers';\nimport { formatEther } from 'ethers/lib/utils';\nimport { aaveGovernanceV2Addresses } from '../../config';\nimport {\n  IGovernanceStrategy,\n  IGovernanceStrategy__factory,\n  IGovernanceV2Helper,\n  IGovernanceV2Helper__factory,\n} from '../../contract-types';\nimport { IAaveGovernanceV2__factory } from '../../contract-types/factories/IAaveGovernanceV2__factory';\nimport { IAaveGovernanceV2 } from '../../contract-types/IAaveGovernanceV2';\nimport AaveGovernanceV2Interface from '../../interfaces/v2/AaveGovernanceV2';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n} from '../../types';\nimport {\n  ExecutorType,\n  GovCancelType,\n  GovCreateType,\n  GovExecuteType,\n  GovGetProposalsType,\n  GovGetProposalType,\n  GovGetVotingAtBlockType,\n  GovGetVotingSupplyType,\n  GovQueueType,\n  GovSignVotingType,\n  GovSubmitVoteSignType,\n  GovSubmitVoteType,\n  GovGetTokensVotingPower as GovGetPower,\n  GovGetVoteOnProposal,\n} from '../../types/GovernanceV2MethodTypes';\nimport {\n  Proposal,\n  ProposalState,\n  Power,\n  ProposalRPC,\n  Vote,\n} from '../../types/GovernanceV2ReturnTypes';\nimport { getProposalMetadata } from '../../utils/ipfs';\nimport { GovValidator } from '../../validators/methodValidators';\nimport {\n  Is0OrPositiveAmount,\n  IsEthAddress,\n} from '../../validators/paramValidators';\nimport BaseService from '../BaseService';\n\nconst parseProposal = async (rawProposal: ProposalRPC): Promise<Proposal> => {\n  const {\n    id,\n    creator,\n    executor,\n    targets,\n    values,\n    signatures,\n    calldatas,\n    withDelegatecalls,\n    startBlock,\n    endBlock,\n    executionTime,\n    forVotes,\n    againstVotes,\n    executed,\n    canceled,\n    strategy,\n    ipfsHash: ipfsHex,\n    totalVotingSupply,\n    minimumQuorum,\n    minimumDiff,\n    executionTimeWithGracePeriod,\n    proposalCreated,\n    proposalState,\n  } = rawProposal;\n\n  const proposalMetadata = await getProposalMetadata(ipfsHex);\n  const proposal: Proposal = {\n    id: Number(id.toString()),\n    creator,\n    executor,\n    targets,\n    values,\n    signatures,\n    calldatas,\n    withDelegatecalls,\n    startBlock: Number(startBlock.toString()),\n    endBlock: Number(endBlock.toString()),\n    executionTime: executionTime.toString(),\n    forVotes: forVotes.toString(),\n    againstVotes: againstVotes.toString(),\n    executed,\n    canceled,\n    strategy,\n    ipfsHash: proposalMetadata.ipfsHash,\n    state: Object.values(ProposalState)[proposalState],\n    minimumQuorum: minimumQuorum.toString(),\n    minimumDiff: minimumDiff.toString(),\n    executionTimeWithGracePeriod: executionTimeWithGracePeriod.toString(),\n    title: proposalMetadata.title,\n    description: proposalMetadata.description,\n    shortDescription: proposalMetadata.shortDescription,\n    proposalCreated: Number(proposalCreated.toString()),\n    totalVotingSupply: totalVotingSupply.toString(),\n  };\n\n  return proposal;\n};\nexport default class AaveGovernanceV2Service\n  extends BaseService<IAaveGovernanceV2>\n  implements AaveGovernanceV2Interface {\n  readonly aaveGovernanceV2Address: string;\n\n  readonly aaveGovernanceV2HelperAddress: string;\n\n  readonly executors: tEthereumAddress[] = [];\n\n  constructor(config: Configuration) {\n    super(config, IAaveGovernanceV2__factory);\n\n    const { network } = this.config;\n    const {\n      AAVE_GOVERNANCE_V2,\n      AAVE_GOVERNANCE_V2_HELPER,\n      AAVE_GOVERNANCE_V2_EXECUTOR_SHORT,\n      AAVE_GOVERNANCE_V2_EXECUTOR_LONG,\n    } = aaveGovernanceV2Addresses[network];\n\n    this.aaveGovernanceV2Address = AAVE_GOVERNANCE_V2;\n    this.aaveGovernanceV2HelperAddress = AAVE_GOVERNANCE_V2_HELPER;\n    this.executors[ExecutorType.Short] = AAVE_GOVERNANCE_V2_EXECUTOR_SHORT;\n    this.executors[ExecutorType.Long] = AAVE_GOVERNANCE_V2_EXECUTOR_LONG;\n  }\n\n  @GovValidator\n  public async create(\n    @IsEthAddress('user')\n    {\n      user,\n      targets,\n      values,\n      signatures,\n      calldatas,\n      withDelegateCalls,\n      ipfsHash,\n      executor,\n    }: GovCreateType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.create(\n          this.executors[executor],\n          targets,\n          values,\n          signatures,\n          calldatas,\n          withDelegateCalls,\n          ipfsHash\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async cancel(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovCancelType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.cancel(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async queue(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovQueueType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.queue(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async execute(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId }: GovExecuteType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () => govContract.populateTransaction.execute(proposalId),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async submitVote(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId, support }: GovSubmitVoteType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.submitVote(proposalId, support),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async signVoting(\n    @Is0OrPositiveAmount('proposalId')\n    { support, proposalId }: GovSignVotingType\n  ): Promise<string> {\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        VoteEmitted: [\n          { name: 'id', type: 'uint256' },\n          { name: 'support', type: 'bool' },\n        ],\n      },\n      primaryType: 'VoteEmitted' as const,\n      domain: {\n        name: 'Aave Governance v2',\n        chainId: ChainId[this.config.network],\n        verifyingContract: this.aaveGovernanceV2Address,\n      },\n      message: {\n        support,\n        id: proposalId,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovValidator\n  public async submitVoteBySignature(\n    @IsEthAddress('user')\n    @Is0OrPositiveAmount('proposalId')\n    { user, proposalId, support, signature }: GovSubmitVoteSignType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n\n    const sig: Signature = utils.splitSignature(signature);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        govContract.populateTransaction.submitVoteBySignature(\n          proposalId,\n          support,\n          sig.v,\n          sig.r,\n          sig.s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOVERNANCE_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n    return txs;\n  }\n\n  @GovValidator\n  public async getProposals({\n    skip,\n    limit,\n  }: GovGetProposalsType): Promise<Proposal[]> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n\n    const result = await helper.getProposals(\n      skip.toString(),\n      limit.toString(),\n      this.aaveGovernanceV2Address\n    );\n\n    const proposals: Promise<Proposal[]> = Promise.all(\n      result.map(\n        async (rawProposal: ProposalRPC): Promise<Proposal> =>\n          parseProposal(rawProposal)\n      )\n    );\n\n    return proposals;\n  }\n\n  @GovValidator\n  public async getProposal({\n    proposalId,\n  }: GovGetProposalType): Promise<Proposal> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n\n    const proposal = await helper.getProposal(\n      proposalId,\n      this.aaveGovernanceV2Address\n    );\n\n    return parseProposal(proposal);\n  }\n\n  @GovValidator\n  public async getPropositionPowerAt({\n    user,\n    block,\n    strategy,\n  }: GovGetVotingAtBlockType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const power = await proposalStrategy.getPropositionPowerAt(\n      user,\n      block.toString()\n    );\n    return formatEther(power);\n  }\n\n  @GovValidator\n  public async getVotingPowerAt({\n    user,\n    block,\n    strategy,\n  }: GovGetVotingAtBlockType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const power = await proposalStrategy.getVotingPowerAt(\n      user,\n      block.toString()\n    );\n    return formatEther(power);\n  }\n\n  @GovValidator\n  public async getTotalPropositionSupplyAt({\n    block,\n    strategy,\n  }: GovGetVotingSupplyType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const total = await proposalStrategy.getTotalPropositionSupplyAt(\n      block.toString()\n    );\n    return formatEther(total);\n  }\n\n  @GovValidator\n  public async getTotalVotingSupplyAt({\n    block,\n    strategy,\n  }: GovGetVotingSupplyType): Promise<string> {\n    const { provider }: Configuration = this.config;\n    const proposalStrategy: IGovernanceStrategy = IGovernanceStrategy__factory.connect(\n      strategy,\n      provider\n    );\n\n    const total = await proposalStrategy.getTotalVotingSupplyAt(\n      block.toString()\n    );\n    return formatEther(total);\n  }\n\n  @GovValidator\n  public async getTokensPower({ user, tokens }: GovGetPower): Promise<Power[]> {\n    const { provider }: Configuration = this.config;\n    const helper: IGovernanceV2Helper = IGovernanceV2Helper__factory.connect(\n      this.aaveGovernanceV2HelperAddress,\n      provider\n    );\n    const power = helper.getTokensPower(user, tokens);\n    return power as Promise<Power[]>;\n  }\n\n  @GovValidator\n  public async getVoteOnProposal({\n    proposalId,\n    user,\n  }: GovGetVoteOnProposal): Promise<Vote> {\n    const govContract: IAaveGovernanceV2 = this.getContractInstance(\n      this.aaveGovernanceV2Address\n    );\n    return govContract.getVoteOnProposal(proposalId, user) as Promise<Vote>;\n  }\n}\n","import { splitSignature } from 'ethers/lib/utils';\nimport {\n  IGovernancePowerDelegationToken,\n  IGovernancePowerDelegationToken__factory,\n} from '../../contract-types';\nimport GovernanceDelegationTokenInterface from '../../interfaces/v2/GovernanceDelegationToken';\nimport {\n  ChainId,\n  Configuration,\n  eEthereumTxType,\n  EthereumTransactionTypeExtended,\n  tEthereumAddress,\n  transactionType,\n  tStringDecimalUnits,\n} from '../../types';\nimport {\n  GovDelegate,\n  GovDelegateBySig,\n  GovDelegateByType,\n  GovDelegateByTypeBySig,\n  GovGetDelegateeByType,\n  GovGetNonce,\n  GovGetPowerAtBlock,\n  GovGetPowerCurrent,\n  GovPrepareDelegateSig,\n  GovPrepareDelegateSigByType,\n} from '../../types/GovDelegationMethodTypes';\nimport { canBeEnsAddress } from '../../utils/parsings';\nimport { GovDelegationValidator } from '../../validators/methodValidators';\nimport {\n  Is0OrPositiveAmount,\n  IsEthAddress,\n  IsEthAddressOrENS,\n  IsPositiveAmount,\n} from '../../validators/paramValidators';\nimport BaseService from '../BaseService';\n\nexport default class GovernanceDelegationTokenService\n  extends BaseService<IGovernancePowerDelegationToken>\n  implements GovernanceDelegationTokenInterface {\n  constructor(config: Configuration) {\n    super(config, IGovernancePowerDelegationToken__factory);\n  }\n\n  @GovDelegationValidator\n  public async delegate(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, governanceToken }: GovDelegate\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegate(\n          delegateeAddress\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateByType(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, delegationType, governanceToken }: GovDelegateByType\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateByType(\n          delegateeAddress,\n          delegationType\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateBySig(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    { user, delegatee, expiry, signature, governanceToken }: GovDelegateBySig\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    const nonce = await this.getNonce({ user, governanceToken });\n    const { v, r, s } = splitSignature(signature);\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateBySig(\n          delegateeAddress,\n          nonce,\n          expiry,\n          v,\n          r,\n          s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async delegateByTypeBySig(\n    @IsEthAddress('user')\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    {\n      user,\n      delegatee,\n      delegationType,\n      expiry,\n      signature,\n      governanceToken,\n    }: GovDelegateByTypeBySig\n  ): Promise<EthereumTransactionTypeExtended[]> {\n    const txs: EthereumTransactionTypeExtended[] = [];\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    const nonce = await this.getNonce({ user, governanceToken });\n    const { v, r, s } = splitSignature(signature);\n\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const txCallback: () => Promise<transactionType> = this.generateTxCallback({\n      rawTxMethod: () =>\n        governanceDelegationToken.populateTransaction.delegateByTypeBySig(\n          delegateeAddress,\n          delegationType,\n          nonce,\n          expiry,\n          v,\n          r,\n          s\n        ),\n      from: user,\n    });\n\n    txs.push({\n      tx: txCallback,\n      txType: eEthereumTxType.GOV_DELEGATION_ACTION,\n      gas: this.generateTxPriceEstimation(txs, txCallback),\n    });\n\n    return txs;\n  }\n\n  @GovDelegationValidator\n  public async prepareDelegateSignature(\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    @Is0OrPositiveAmount('nonce')\n    {\n      delegatee,\n      nonce,\n      expiry,\n      governanceTokenName,\n      governanceToken,\n    }: GovPrepareDelegateSig\n  ): Promise<string> {\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        Delegate: [\n          { name: 'delegatee', type: 'address' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'expiry', type: 'uint256' },\n        ],\n      },\n      primaryType: 'Delegate' as const,\n      domain: {\n        name: governanceTokenName,\n        chainId: ChainId[this.config.network],\n        verifyingContract: governanceToken,\n      },\n      message: {\n        delegatee: delegateeAddress,\n        nonce,\n        expiry,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovDelegationValidator\n  public async prepareDelegateByTypeSignature(\n    @IsEthAddressOrENS('delegatee')\n    @IsEthAddress('governanceToken')\n    @Is0OrPositiveAmount('nonce')\n    {\n      delegatee,\n      type,\n      nonce,\n      expiry,\n      governanceTokenName,\n      governanceToken,\n    }: GovPrepareDelegateSigByType\n  ): Promise<string> {\n    const delegateeAddress: string = await this.getDelegateeAddress(delegatee);\n\n    const typeData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n          { name: 'verifyingContract', type: 'address' },\n        ],\n        DelegateByType: [\n          { name: 'delegatee', type: 'address' },\n          { name: 'type', type: 'uint256' },\n          { name: 'nonce', type: 'uint256' },\n          { name: 'expiry', type: 'uint256' },\n        ],\n      },\n      primaryType: 'DelegateByType' as const,\n      domain: {\n        name: governanceTokenName,\n        chainId: ChainId[this.config.network],\n        verifyingContract: governanceToken,\n      },\n      message: {\n        delegatee: delegateeAddress,\n        type,\n        nonce,\n        expiry,\n      },\n    };\n\n    return JSON.stringify(typeData);\n  }\n\n  @GovDelegationValidator\n  public async getDelegateeByType(\n    @IsEthAddress('delegator')\n    @IsEthAddress('governanceToken')\n    { delegator, delegationType, governanceToken }: GovGetDelegateeByType\n  ): Promise<tEthereumAddress> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return governanceDelegationToken.getDelegateeByType(\n      delegator,\n      delegationType\n    );\n  }\n\n  @GovDelegationValidator\n  public async getPowerCurrent(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    { user, delegationType, governanceToken }: GovGetPowerCurrent\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return (\n      await governanceDelegationToken.getPowerCurrent(user, delegationType)\n    ).toString();\n  }\n\n  @GovDelegationValidator\n  public async getPowerAtBlock(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    @IsPositiveAmount('blockNumber')\n    { user, blockNumber, delegationType, governanceToken }: GovGetPowerAtBlock\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    return (\n      await governanceDelegationToken.getPowerAtBlock(\n        user,\n        blockNumber,\n        delegationType\n      )\n    ).toString();\n  }\n\n  @GovDelegationValidator\n  public async getNonce(\n    @IsEthAddress('user')\n    @IsEthAddress('governanceToken')\n    { user, governanceToken }: GovGetNonce\n  ): Promise<tStringDecimalUnits> {\n    const governanceDelegationToken: IGovernancePowerDelegationToken = this.getContractInstance(\n      governanceToken\n    );\n    // eslint-disable-next-line no-underscore-dangle\n    return (await governanceDelegationToken._nonces(user)).toString();\n  }\n\n  private async getDelegateeAddress(delegatee: string): Promise<string> {\n    if (canBeEnsAddress(delegatee)) {\n      const delegateeAddress = await this.config.provider.resolveName(\n        delegatee\n      );\n      if (!delegateeAddress)\n        throw new Error(`Address ${delegatee} is not a valid ENS address`);\n\n      return delegateeAddress;\n    }\n\n    return delegatee;\n  }\n}\n","import { providers } from 'ethers';\nimport { Network, Market, DefaultProviderKeys } from './types';\nimport TxBuilderInterface from './interfaces/TxBuilder';\nimport LendingPoolInterface from './interfaces/v2/LendingPool';\nimport LendingPool from './services/v2/LendingPool';\nimport BaseTxBuilder from './txBuilder';\nimport WETHGatewayInterface from './interfaces/WETHGateway';\nimport WETHGatewayService from './services/WETHGateway';\nimport BaseDebtTokenInterface from './interfaces/BaseDebtToken';\nimport BaseDebtToken from './services/BaseDebtToken';\nimport LiquiditySwapAdapterService from './services/LiquiditySwapAdapter';\nimport LiquiditySwapAdapterInterface from './interfaces/LiquiditySwapAdapter';\nimport RepayWithCollateralAdapterService from './services/RepayWithCollateralAdapter';\nimport RepayWithCollateralAdapterInterface from './interfaces/RepayWithCollateralAdapter';\nimport AaveGovernanceV2Interface from './interfaces/v2/AaveGovernanceV2';\nimport GovernanceDelegationTokenInterface from './interfaces/v2/GovernanceDelegationToken';\nimport AaveGovernanceV2Service from './services/v2/AaveGovernanceV2';\nimport GovernanceDelegationTokenService from './services/v2/GovernanceDelegationTokenService';\n\nexport default class TxBuilder\n  extends BaseTxBuilder\n  implements TxBuilderInterface {\n  readonly lendingPools: {\n    [market: string]: LendingPoolInterface;\n  };\n\n  readonly baseDebtTokenService: BaseDebtTokenInterface;\n\n  readonly liquiditySwapAdapterService: LiquiditySwapAdapterInterface;\n\n  readonly repayWithCollateralAdapterService: RepayWithCollateralAdapterInterface;\n\n  public aaveGovernanceV2Service: AaveGovernanceV2Interface;\n\n  public governanceDelegationTokenService: GovernanceDelegationTokenInterface;\n\n  public wethGatewayService: WETHGatewayInterface;\n\n  constructor(\n    network: Network = Network.mainnet,\n    injectedProvider?:\n      | providers.ExternalProvider\n      | providers.Web3Provider\n      | string\n      | undefined,\n    defaultProviderKeys?: DefaultProviderKeys\n  ) {\n    super(network, injectedProvider, defaultProviderKeys);\n\n    this.lendingPools = {};\n    this.baseDebtTokenService = new BaseDebtToken(\n      this.configuration,\n      this.erc20Service\n    );\n    this.wethGatewayService = new WETHGatewayService(\n      this.configuration,\n      this.baseDebtTokenService,\n      this.erc20Service\n    );\n    this.liquiditySwapAdapterService = new LiquiditySwapAdapterService(\n      this.configuration\n    );\n    this.repayWithCollateralAdapterService = new RepayWithCollateralAdapterService(\n      this.configuration\n    );\n    this.aaveGovernanceV2Service = new AaveGovernanceV2Service(\n      this.configuration\n    );\n    this.governanceDelegationTokenService = new GovernanceDelegationTokenService(\n      this.configuration\n    );\n  }\n\n  public getLendingPool = (market: Market): LendingPoolInterface => {\n    if (!this.lendingPools[market]) {\n      this.lendingPools[market] = new LendingPool(\n        this.configuration,\n        this.erc20Service,\n        this.synthetixService,\n        this.wethGatewayService,\n        this.liquiditySwapAdapterService,\n        this.repayWithCollateralAdapterService,\n        market\n      );\n    }\n\n    return this.lendingPools[market];\n  };\n}\n"],"names":["BigNumberZD","BigNumber","clone","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","valueToBigNumber","amount","valueToZDBigNumber","bn10","bn10PowLookup","pow10","decimals","pow","normalize","n","dividedBy","toString","BorrowRateMode","WAD","HALF_WAD","RAY","HALF_RAY","WAD_RAY_RATIO","rayMul","a","b","plus","multipliedBy","div","rayDiv","rayToWad","wadToRay","decimalPlaces","binomialApproximatedRayPow","p","base","exp","eq","expMinusOne","minus","expMinusTwo","gt","basePowerTwo","basePowerThree","firstTerm","secondTerm","thirdTerm","SECONDS_PER_YEAR","getCompoundedBorrowBalance","reserve","userReserve","currentTimestamp","cumulatedInterest","principalBorrows","borrowRateMode","Variable","RayMath","calculateCompoundedInterest","variableBorrowRate","lastUpdateTimestamp","variableBorrowIndex","borrowRate","rate","timeDelta","calculateLinearInterest","calculateHealthFactorFromBalances","collateralBalanceETH","borrowBalanceETH","totalFeesETH","currentLiquidationThreshold","calculateAvailableBorrowsETH","currentLtv","availableBorrowsETH","lt","borrowFee","getReserveNormalizedIncome","liquidityRate","liquidityIndex","calculateCumulatedBalance","balance","poolReserve","userBalanceIndex","calculateCurrentUnderlyingBalance","principalATokenBalance","redirectedBalance","interestRedirectionAddress","computeRawUserSummaryData","poolReservesData","rawUserReserves","userId","usdPriceEth","totalLiquidityETH","totalCollateralETH","totalBorrowsETH","userReservesData","map","find","id","Error","computedUserReserve","priceInEth","price","currentUnderlyingBalance","currentUnderlyingBalanceETH","currentUnderlyingBalanceUSD","toFixed","principalBorrowsETH","principalBorrowsUSD","currentBorrows","currentBorrowsETH","currentBorrowsUSD","originationFeeETH","originationFee","originationFeeUSD","computeUserReserveData","usageAsCollateralEnabled","usageAsCollateralEnabledOnUser","baseLTVasCollateral","reserveLiquidationThreshold","sort","symbol","healthFactor","totalCollateralUSD","totalLiquidityUSD","totalBorrowsUSD","totalFeesUSD","totalBorrowsWithFeesETH","totalBorrowsWithFeesUSD","totalBorrowsAndFeesETH","maxAmountToWithdrawInEth","currentLoanToValue","reservesData","calculateAverageRate","index0","index1","timestamp0","timestamp1","userData","reserveDecimals","reserveLiquidationBonus","reserves","reserveIndexes30DaysAgo","reserve30DaysAgo","res","_reserveIndexes30Days","paramsHistory","_reserveIndexes30Days2","avg30DaysVariableBorrowRate","timestamp","undefined","avg30DaysLiquidityRate","stableBorrowRate","totalLiquidity","availableLiquidity","totalBorrows","totalBorrowsVariable","totalBorrowsStable","amountToDeposit","amountToBorrow","borrowMode","optimalUtilisationRate","baseVariableBorrowRate","totalDeposits","utilizationRate","currentStableBorrowRate","currentVariableBorrowRate","currentLiquidityRate","excessUtilizationRateRatio","stableRateSlope1","stableRateSlope2","variableRateSlope1","variableRateSlope2","weightedVariableRate","weightedStableRate","averageStableBorrowRate","getCompoundedBalance","_principalBalance","_reserveIndex","_reserveRate","_lastUpdateTimestamp","principalBalance","getCompoundedStableBalance","_userStableRate","getEthAndUsdBalance","balanceInEth","balanceInUsd","underlyingBalance","scaledATokenBalance","underlyingBalanceETH","underlyingBalanceUSD","variableBorrows","scaledVariableDebt","variableBorrowsETH","variableBorrowsUSD","stableBorrows","principalStableDebt","stableBorrowLastUpdateTimestamp","stableBorrowsETH","stableBorrowsUSD","formatUserSummaryData","formatReserves","totalVariableDebt","totalScaledVariableDebt","totalStableDebt","totalPrincipalStableDebt","averageStableRate","stableDebtLastUpdateTimestamp","totalDebt","reserveFactor","InterestRate","Network","ChainId","eEthereumTxType","ProtocolAction","GovernanceVote","Stake","Market","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","value","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","commonContractAddressBetweenMarketsV2","kovan","SYNTHETIX_PROXY_ADDRESS","GOVERNANCE_PROTO_CONTRACT","LEND_TO_AAVE_MIGRATOR","WETH_GATEWAY","FAUCET","SWAP_COLLATERAL_ADAPTER","REPAY_WITH_COLLATERAL_ADAPTER","FLASHLIQUIDATION","ropsten","mainnet","distinctContractAddressBetweenMarketsV2","Proto","LENDINGPOOL_ADDRESS","aaveGovernanceV2Addresses","AAVE_GOVERNANCE_V2","AAVE_GOVERNANCE_V2_EXECUTOR_SHORT","AAVE_GOVERNANCE_V2_EXECUTOR_LONG","AAVE_GOVERNANCE_V2_HELPER","DEFAULT_NULL_VALUE_ON_TX","from","toHexString","DEFAULT_APPROVE_AMOUNT","constants","MaxUint256","MAX_UINT_AMOUNT","API_ETH_MOCK_ADDRESS","gasLimitRecommendations","limit","recommended","deposit","withdraw","liquidationCall","liquidationFlash","repay","borrowETH","withdrawETH","swapCollateral","repayCollateral","distinctStakingAddressesBetweenTokens","Aave","canUsePermit","TOKEN_STAKING_ADDRESS","STAKING_HELPER_ADDRESS","Balancer","enabledNetworksByService","staking","lendingPool","governance","wethGateway","faucet","liquiditySwapAdapter","repayWithCollateralAdapter","aaveGovernanceV2","IAaveGovernanceV2__factory","connect","address","signerOrProvider","Contract","_abi","anonymous","inputs","indexed","internalType","outputs","stateMutability","components","IAaveStakingHelper__factory","IDebtTokenBase__factory","IERC20Detailed__factory","IFaucet__factory","IGovernancePowerDelegationToken__factory","IGovernanceStrategy__factory","IGovernanceV2Helper__factory","ILendingPool__factory","ILendToAaveMigrator__factory","IMinter__factory","IRepayWithCollateral__factory","IStakedToken__factory","ISwapCollateral__factory","ISynthetix__factory","IWETHGateway__factory","parseNumber","getTxValue","toLowerCase","mintAmountsPerToken","AAVE","BAT","BUSD","DAI","ENJ","KNC","LEND","LINK","MANA","MKR","REN","REP","SNX","SUSD","TUSD","UNI","USDC","USDT","WBTC","YFI","ZRX","UNIUSDC","UNIDAI","UNIUSDT","UNIDAIETH","UNIUSDCETH","UNISETHETH","UNILENDETH","UNILINKETH","UNIMKRETH","canBeEnsAddress","ensAddress","endsWith","isEthAddressMetadataKey","isEthAddressOrENSMetadataKey","isPositiveMetadataKey","isPositiveOrMinusOneMetadataKey","is0OrPositiveMetadataKey","optionalMetadataKey","IsEthAddress","field","target","propertyKey","parameterIndex","existingPossibleAddresses","Reflect","getOwnMetadata","index","defineMetadata","IsEthAddressOrENS","IsPositiveAmount","params","Is0OrPositiveAmount","IsPositiveOrMinusOneAmount","optionalValidator","propertyName","methodArguments","optionalParameters","isParamOptional","isEthAddressValidator","addressParameters","storedParams","utils","isAddress","isEthAddressOrEnsValidator","amountGtThan0Validator","amountParameters","Number","amount0OrPositiveValidator","amountGtThan0OrMinus1","amountMinusOneParameters","LPValidator","descriptor","currentNetwork","config","network","acceptedNetworks","market","indexOf","arguments","apply","StakingValidator","tokenStake","WETHValidator","GovValidator","GovDelegationValidator","estimateGas","tx","gasSurplus","provider","estimatedGas","add","mul","getGasPrice","BaseService","contractFactory","_this","contractInstances","rawTxMethod","action","gasLimit","lte","txs","txCallback","gasPrice","txType","ERC20_APPROVAL","gasPriceProv","console","LendingPool","erc20Service","synthetixService","wethGatewayService","liquiditySwapAdapterService","repayWithCollateralAdapterService","lendingPoolAddress","user","onBehalfOf","referralCode","depositETH","isApproved","approve","decimalsOf","convertedAmount","synthetixValidation","approveTx","lendingPoolContract","getContractInstance","generateTxCallback","populateTransaction","DLP_ACTION","gas","generateTxPriceEstimation","aTokenAddress","borrow","interestRateMode","debtTokenAddress","formatAmount","numericRateMode","repayETH","swapBorrowRateMode","setUsageAsCollateral","usageAsCollateral","setUserUseReserveAsCollateral","liquidator","liquidatedUser","debtReserve","collateralReserve","purchaseAmount","getAToken","getTokenData","all","flash","fromAsset","fromAToken","toAsset","fromAmount","toAmount","maxSlippage","swapAll","useEthPath","permitParams","permitSignature","deadline","v","r","s","tokenDecimals","tokenToDecimals","amountSlippage","amountSlippageConverted","FLASHLOAN_PREMIUM_TOTAL","convertedAmountNoFees","sub","amountWithSurplus","convertedAmountWithSurplus","defaultAbiCoder","encode","flashLoan","swapAndDeposit","assetToSwapFrom","assetToSwapTo","amountToSwap","minAmountToReceive","repayWithCollateral","assetToRepay","repayWithAmount","repayAmount","repayAllDebt","rateMode","convertedRepayWithAmount","repayAmountWithSurplus","convertedRepayAmount","numericInterestRate","Stable","swapAndRepayTx","swapAndRepay","collateralAsset","debtAsset","collateralAmount","debtRepayAmount","debtRateMode","permit","flashLiquidation","borrowedAsset","debtTokenCover","liquidateAll","initiator","addSurplus","convertedDebt","convertedDebtTokenCover","flashBorrowAmount","__decorate","__param","ERC20Service","token","spender","erc20Contract","userAddress","allowance","amountBNWithDecimals","gte","nameGetter","symbolGetter","decimalsGetter","FaucetService","faucetAddress","faucetContract","mint","tokenSymbol","_this2","FAUCET_MINT","getMinter","minterContract","isEthRequired","LTAMigratorService","migratorContract","migratorAddress","lendToken","migrateFromLEND","MIGRATION_LEND_AAVE","StakingService","stakingContractAddress","stakingHelperContractAddress","stakingHelperContract","signStaking","nonce","stakingContract","STAKED_TOKEN","stakedToken","typeData","types","EIP712Domain","Permit","primaryType","domain","version","chainId","verifyingContract","message","owner","JSON","stringify","stakeWithPermit","signature","sig","splitSignature","stake","STAKE_ACTION","redeem","cooldown","claimRewards","REWARD_TOKEN","existingOptionalParameters","SynthetixService","synthAddress","toUpperCase","isSnxTransferable","synthContract","transferableSynthetix","transferableAmount","BaseTxBuilder","injectedProvider","defaultProviderKeys","stakeToken","stakings","configuration","providers","JsonRpcProvider","Web3Provider","ethers","getDefaultProvider","log","ltaMigratorService","faucetService","WETHGatewayService","baseDebtTokenService","wethGatewayAddress","wethGatewayContract","isDelegationApproved","approveDelegationTx","approveDelegation","BaseDebtToken","delegatee","debtTokenContract","allowanceGiver","allowanceReceiver","borrowAllowance","delegatedAllowance","LiquiditySwapAdapterService","liquiditySwapAdapterAddress","liquiditySwapContract","ExecutorType","ProposalState","RepayWithCollateralAdapterService","repayWithCollateralAddress","repayWithCollateralContract","getLink","hash","ipfsEndpoint","MEMORIZE","getProposalMetadata","ipfsHash","base58","Buffer","axios","get","timeout","data","title","description","shortDescription","_context","parseProposal","rawProposal","creator","executor","targets","signatures","calldatas","withDelegatecalls","startBlock","endBlock","executionTime","forVotes","againstVotes","executed","canceled","strategy","ipfsHex","totalVotingSupply","minimumQuorum","minimumDiff","executionTimeWithGracePeriod","proposalCreated","proposalState","proposalMetadata","proposal","AaveGovernanceV2Service","aaveGovernanceV2Address","aaveGovernanceV2HelperAddress","executors","Short","Long","withDelegateCalls","govContract","GOVERNANCE_ACTION","cancel","proposalId","queue","execute","submitVote","support","signVoting","VoteEmitted","submitVoteBySignature","getProposals","skip","helper","proposals","getProposal","getPropositionPowerAt","block","proposalStrategy","formatEther","getVotingPowerAt","getTotalPropositionSupplyAt","getTotalVotingSupplyAt","getTokensPower","tokens","power","getVoteOnProposal","GovernanceDelegationTokenService","_BaseService","governanceDelegationToken","governanceToken","getDelegateeAddress","delegateeAddress","GOV_DELEGATION_ACTION","delegateByType","delegationType","delegateBySig","expiry","getNonce","delegateByTypeBySig","prepareDelegateSignature","governanceTokenName","Delegate","prepareDelegateByTypeSignature","DelegateByType","getDelegateeByType","delegator","getPowerCurrent","getPowerAtBlock","blockNumber","_nonces","resolveName","TxBuilder","lendingPools","aaveGovernanceV2Service","governanceDelegationTokenService","x","z","modulo"],"mappings":"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4J,aAAc,UACdnG,KAAM,cACNzD,KAAM,YAGVyD,KAAM,mBACNoG,QAAS,CACP,CACED,aAAc,UACdnG,KAAM,GACNzD,KAAM,YAGV8J,gBAAiB,OACjB9J,KAAM,aCxHGsK,GAAb,kCACSlB,QAAP,SACEC,EACAC,UAEO,IAAIC,WAASF,EAASG,GAAMF,MALvC,GASME,GAAO,CACX,CACEE,OAAQ,CACN,CACEE,aAAc,UACdnG,KAAM,KACNzD,KAAM,WAER,CACE4J,aAAc,6BACdnG,KAAM,aACNzD,KAAM,YAGVyD,KAAM,cACNoG,QAAS,CACP,CACEE,WAAY,CACV,CACEH,aAAc,UACdnG,KAAM,oBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,gBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,cACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,+BACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,kBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,KACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,UACNzD,KAAM,WAER,CACE4J,aAAc,iCACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,YACdnG,KAAM,UACNzD,KAAM,aAER,CACE4J,aAAc,YACdnG,KAAM,SACNzD,KAAM,aAER,CACE4J,aAAc,WACdnG,KAAM,aACNzD,KAAM,YAER,CACE4J,aAAc,UACdnG,KAAM,YACNzD,KAAM,WAER,CACE4J,aAAc,SACdnG,KAAM,oBACNzD,KAAM,UAER,CACE4J,aAAc,UACdnG,KAAM,aACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,gBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,eACNzD,KAAM,WAER,CACE4J,aAAc,OACdnG,KAAM,WACNzD,KAAM,QAER,CACE4J,aAAc,OACdnG,KAAM,WACNzD,KAAM,QAER,CACE4J,aAAc,UACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,uCACdnG,KAAM,gBACNzD,KAAM,UAGV4J,aAAc,2CACdnG,KAAM,gBACNzD,KAAM,UAGV8J,gBAAiB,OACjB9J,KAAM,YAER,CACE0J,OAAQ,CACN,CACEE,aAAc,UACdnG,KAAM,OACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,QACNzD,KAAM,WAER,CACE4J,aAAc,6BACdnG,KAAM,aACNzD,KAAM,YAGVyD,KAAM,eACNoG,QAAS,CACP,CACEE,WAAY,CACV,CACEH,aAAc,UACdnG,KAAM,oBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,gBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,cACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,+BACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,kBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,KACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,UACNzD,KAAM,WAER,CACE4J,aAAc,iCACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,YACdnG,KAAM,UACNzD,KAAM,aAER,CACE4J,aAAc,YACdnG,KAAM,SACNzD,KAAM,aAER,CACE4J,aAAc,WACdnG,KAAM,aACNzD,KAAM,YAER,CACE4J,aAAc,UACdnG,KAAM,YACNzD,KAAM,WAER,CACE4J,aAAc,SACdnG,KAAM,oBACNzD,KAAM,UAER,CACE4J,aAAc,UACdnG,KAAM,aACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,gBACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,WACNzD,KAAM,WAER,CACE4J,aAAc,UACdnG,KAAM,eACNzD,KAAM,WAER,CACE4J,aAAc,OACdnG,KAAM,WACNzD,KAAM,QAER,CACE4J,aAAc,OACdnG,KAAM,WACNzD,KAAM,QAER,CACE4J,aAAc,UACdnG,KAAM,WAC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"}